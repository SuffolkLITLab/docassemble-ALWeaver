def: preview_questions
mako: |
  <%def name="preview_field(field)">\
          <div class="row">
              <div class="col-md">
              ${ field.label }
              </div>
              <div class="col-md">
              <a href="${ url_action(field.attr_name("edit_field")) }" class="edit-link"><i>${ field.field_type }</i>
              <i class="fa-solid fa-pencil edit-icon"></i></a>
              </div>
          </div>
  </%def>
  <%def name="preview_question_screen(question)">\
  <div class="card h-100 review-question">
    <div class="card-header">
      ${ question.question_text }
    </div>
    <div class="card-body">
      <p>${ question.subquestion_text }</p>
      <div class="container">
      % for field in question.field_list:
      ${ preview_field(field) }
      % endfor
      </div>
    </div>
    <div class="card-footer">
    % if isinstance(question, DAQuestion):
        <a href="${ url_ask([question.attr_name("edit_question"), {"recompute": [question.attr_name("field_tbl_done")]}]) }" class="card-link edit-link">
            Edit screen
            <i class="fas fa-pencil-alt edit-icon"></i>
        </a>
    % else:
    <i>${ question.card_footer_text }</i>
    % endif
    </div>
  </div>
  </%def>
  <%def name="preview_dafield_screen(field)">\
  <div class="card h-100 weaver-builtin review-question">
    <div class="card-header">
      % if field.trigger_gather().endswith(".gather()"):
      Names of ${ field.trigger_gather().replace(".gather()", "").capitalize().replace("_", " ") }
      % else:
      ${ field.variable_name_guess }
      % endif
    </div>
    <div class="card-body">
      <p></p>
    </div>
    <div class="card-footer">
    <p><i>Built-in screen</i></p>
    </div>
  </div>
  </%def>
---
code: |
  mock_intro_screen = DAObject(
    question_text = f"<a href=\"{ url_action('interview.intro_prompt') }\" class=\"edit-link\">{ interview.intro_prompt }<i class=\"fas fa-pencil-alt edit-icon\"></i></a>: [Organization name]",
    subquestion_text = """
  <p>[Organization name] can help you complete and download forms in 3 steps:</p>
  <b>Step 1.</b> Answer questions that will fill in your form for you.<br>
  <b>Step 2.</b> Preview the completed form.<br> ...
  """,
  field_list=[],
  card_footer_text = "Introduction screen"
  )

  mock_preview_screen = DAObject(
    question_text = "Preview your form before you sign it",
    subquestion_text = """
    <p>Here is a preview of the form you will sign on the next page.</p>
    <p>Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.</p>
  ...
  """,
  field_list=[],
  card_footer_text = "Preview screen"
  )

  mock_signature_choice = DAObject(
    question_text = "Your documents are almost ready",
    subquestion_text = "How do you want to sign them?",
    field_list = [],
    card_footer_text = "Signature method screen"
  )

  mock_signature_screen = DAObject(
    question_text = "Please sign below",
    subquestion_text = "[_____________]",
    field_list = [],
    card_footer_text = "Signature screen"
  )

  mock_download_screen = DAObject(
    question_text = "All done.",
    subquestion_text = "Thank you. Your form is ready to download and deliver. ...",
    field_list = [],
    card_footer_text = "Download screen"
  )
---
id: review-weaver
need:
  - screen_order
  - mock_intro_screen
  - mock_preview_screen
  - mock_signature_choice
  - mock_signature_screen
  - mock_download_screen
reconsider:
  - mock_download_screen
usedefs:
  - preview_questions
question: |
  Review and edit your interview
continue button field: review_weaver
css: |
  <style>
  .question-review-weaver #daquestion {
        flex: 0 0 auto;
        width: 83.33333333%;
        margin-left: 8.33333333%;  
  }
  </style>
review:
  - note: |
      <h2 class="h3">Preview of interview screens</h2>
      Review the screens below. 
      
      1. Click "<a href="${ url_ask(['show_screen_order', {"recompute": ["screen_tbl_done"]}]) }">Change screen order</a>" to
      change the order of question screens.
      1. Click the "Edit screen" button to edit the text or order of fields on a screen.
      1. Click on a dotted line to edit an individual field.

      <i>Note: this preview shows the default
      look and feel of a Weaver-generated interview. Your output may 
      be different and can be customized later.</i>

      <div class="card-deck row row-cols-1 row-cols-md-3">
      <div class="col mb-4">
      ${ preview_question_screen(mock_intro_screen) }
      </div>
      <div class="col mb-4">
        <div class="card h-100 weaver-builtin review-question">
          <div class="card-header">
            <a href="{ url_action("interview.title") }" class="edit-link">${ interview.title }<i class="fas fa-pencil-alt edit-icon"></i></a>
          </div>
          <div class="card-body">
          % for line in interview.getting_started.split("\n"):
          <p>${ line }</p>
          % endfor
          </div>
          <div class="card-footer">
          <a href="${ url_action("interview.getting_started") }" class="edit-link">Edit getting started screen<i class="fas fa-pencil-alt edit-icon"></i></a>
          </div>
        </div>
      </div>
      % for question in (screen_order if not defined("screen_tbl_done") else screen_reordered) + [mock_preview_screen, mock_signature_choice, mock_signature_screen, mock_download_screen]:
      <div class="col mb-4">
      % if isinstance(question, DAField):
      ${ preview_dafield_screen(question) }
      % else:
      ${ preview_question_screen(question) }
      % endif
      </div>
      % endfor
      </div>

      <a href="${ url_ask(['show_screen_order', {"recompute": ["screen_tbl_done"]}]) }"><i class="fa-solid fa-bars-staggered"></i> Change screen order</a>
  - Edit: |-
      interview.title
    button: |
      **Draft title and "Getting Started" page**

      **Title**: ${ showifdef('interview.title') }

      **Mobile device title**: ${ showifdef('interview.short_title') }

      **Description**: ${ showifdef('interview.description') }

      **Getting started page**
      
      ${ single_to_double_newlines(showifdef('interview.getting_started')) }
      
  - Edit: |-
      interview.intro_prompt
    button: |
      **What does this form do?**

      ${ showifdef('interview.intro_prompt') }
  - Edit: review_fields_after_labeling
    button: |
      **Review field labels and prompts**

      ${ collapse_template(review_fields_to_add_template) }
  - Edit: interview.typical_role
    button: |
      **User's role on this form**

      % if defined('interview.typical_role'):
      % if interview.typical_role == "plaintiff":
      Person who started the process
      % elif interview.typical_role == "defendant":
      Person responding to a process started by someone else
      % else:
      Unknown
      % endif
      % endif
    show if: |
      interview.form_type != "starts_case"
      
  - Edit: |-
      ask_people_quantity_question
    button: |-
      **How many of each person can appear on the form?**

      % for item in people_quantities:
      - ${ item }: ${ people_quantities[item]  }
      % endfor
  - note: |
      <h2 class="h3">Style and metadata</h2>
  - Edit: 
    - interview.court_related
    - recompute:
        - interview.interview_label
    button: |
      **Information about the original form**

      Is your form court-related?: ${ word(yesno(interview.court_related)) }

      What kind of form is this?: ${ showifdef('interview.form_type') }

      % if interview.court_related:
      Allowed courts (MA only): ${ interview.allowed_courts.true_values() }

      % if interview.allowed_courts["other"]:
      Alternate Allowed Courts: ${ showifdef('interview.allowed_courts_text') }
      % endif

      Categories: ${ interview.categories.true_values() }
      
      % if interview.categories["other"]:
      Other categories : ${ showifdef('interview.other_categories') }
      % endif
      % endif

      Label used to prefix variable names: ${ showifdef('interview_label_draft') }

      Link to original form: ${ showifdef('interview.original_form') }
  - Edit: |-
      interview.author
    button: |
      **Interview author**

      ${ showifdef('interview.author') }
  - Edit: |
      interview.default_country_code
    button: |
      **Defaults for address fields**
      
      ${ country_name(interview.default_country_code) }

      ${ state_name(interview.state, country_code=interview.default_country_code) }
  - Edit: |
      interview.jurisdiction_choices
    button: |
      **Include these brand and question packages**

      ${ interview.jurisdiction_choices.true_values() }

      ${ interview.org_choices.true_values() }
  - Edit: interview.output_mako_choice
    button: |
      **Use this template to create the Docassemble interview (YAML)**

      ${ interview.output_mako_choice }
---
event: |-
  install_step1_status.revisit
id: |-
  revisit install_step1_status
question: |-
  Edit your answers about Install Step1 Status
subquestion: |-
  ${ install_step1_status.table }
---
event: |-
  task_complete.revisit
id: |-
  revisit task_complete
question: |-
  Edit your answers about Task Complete
subquestion: |-
  ${ task_complete.table }
---
event: |-
  task_status.revisit
id: |-
  revisit task_status
question: |-
  Edit your answers about Task Status
subquestion: |-
  ${ task_status.table }
---
event: |-
  task_succeeded.revisit
id: |-
  revisit task_succeeded
question: |-
  Edit your answers about Task Succeeded
subquestion: |-
  ${ task_succeeded.table }
---
event: |-
  weaverdata.revisit
id: |-
  revisit weaverdata
question: |-
  Edit your answers about Weaverdata
subquestion: |-
  ${ weaverdata.table }
---
event: |-
  upload_template_image.revisit
id: |-
  revisit upload_template_image
question: |-
  Edit your answers about Upload Template Image
subquestion: |-
  ${ upload_template_image.table }
---
event: |-
  start_from_scratch_image.revisit
id: |-
  revisit start_from_scratch_image
question: |-
  Edit your answers about Start From Scratch Image
subquestion: |-
  ${ start_from_scratch_image.table }
---
event: |-
  browse_library_image.revisit
id: |-
  revisit browse_library_image
question: |-
  Edit your answers about Browse Library Image
subquestion: |-
  ${ browse_library_image.table }
---
event: |-
  keep_editing_image.revisit
id: |-
  revisit keep_editing_image
question: |-
  Edit your answers about Keep Editing Image
subquestion: |-
  ${ keep_editing_image.table }
---
event: |-
  interview.revisit
id: |-
  revisit interview
question: |-
  Edit your answers about Interview
subquestion: |-
  ${ interview.table }
---
event: |-
  interview_package_download.revisit
id: |-
  revisit interview_package_download
question: |-
  Edit your answers about Interview Package Download
subquestion: |-
  ${ interview_package_download.table }
---
event: |-
  screen_order.revisit
id: |-
  revisit screen_order
question: |-
  Edit your answers about Screen Order
subquestion: |-
  ${ screen_order.table }
---
event: |-
  installer.revisit
id: |-
  revisit installer
question: |-
  Edit your answers about Installer
subquestion: |-
  ${ installer.table }
---
event: |-
  attachments.revisit
id: |-
  revisit attachments
question: |-
  Edit your answers about Attachments
subquestion: |-
  ${ attachments.table }
---
event: |-
  people_quantities.revisit
id: |-
  revisit people_quantities
question: |-
  Edit your answers about People Quantities
subquestion: |-
  ${ people_quantities.table }
---
event: |-
  next_steps_documents.revisit
id: |-
  revisit next_steps_documents
question: |-
  Edit your answers about Next Steps Documents
subquestion: |-
  ${ next_steps_documents.table }
---
event: |-
  weaverdata.revisit
id: |-
  revisit weaverdata
question: |-
  Edit your answers about Weaverdata
subquestion: |-
  ${ weaverdata.table }
---
event: |-
  jurisdiction_choices.revisit
id: |-
  revisit jurisdiction_choices
question: |-
  Edit your answers about Jurisdiction Choices
subquestion: |-
  ${ jurisdiction_choices.table }
---
event: |-
  generic_report.revisit
id: |-
  revisit generic_report
question: |-
  Edit your answers about Generic Report
subquestion: |-
  ${ generic_report.table }
---
event: |-
  placeholder_signature.revisit
id: |-
  revisit placeholder_signature
question: |-
  Edit your answers about Placeholder Signature
subquestion: |-
  ${ placeholder_signature.table }
---
event: |-
  quality_check_overlay.revisit
id: |-
  revisit quality_check_overlay
question: |-
  Edit your answers about Quality Check Overlay
subquestion: |-
  ${ quality_check_overlay.table }
---
columns:
  - 'Make this a purely informational screen': |-
      row_item.is_informational_screen if hasattr(row_item, 'is_informational_screen') else ''
  - 'What should the title of this screen be?': |-
      row_item.question_text if hasattr(row_item, 'question_text') else ''
  - 'What is the text that appears under the title?': |-
      row_item.subquestion_text if hasattr(row_item, 'subquestion_text') else ''
  - 'Select the fields that will appear on this screen': |-
      row_item.field_list if hasattr(row_item, 'field_list') else ''
#  - 'Override the default logic flow by adding a "continue button field"': |-
#      row_item.has_mandatory_field if hasattr(row_item, 'has_mandatory_field') else ''
  - 'Docassemble variable name, in `snake_case`': |-
      row_item.variable if hasattr(row_item, 'variable') else ''
  - 'On-screen label or prompt': |-
      row_item.label if hasattr(row_item, 'label') else ''
  - 'Field type': |-
      row_item.field_type if hasattr(row_item, 'field_type') else ''
  - 'Options (one per line)': |-
      row_item.choices if hasattr(row_item, 'choices') else ''
  - 'Screen title': |-
      row_item.question_text if hasattr(row_item, 'question_text') else ''
  - 'Text on your question screen': |-
      row_item.subquestion_text if hasattr(row_item, 'subquestion_text') else ''
  - fld_order_list: |-
      row_item.fld_order_list if hasattr(row_item, 'fld_order_list') else ''
  - table_data: |-
      row_item.table_data if hasattr(row_item, 'table_data') else ''
rows: |-
  interview
table: |-
  interview.table
---
columns:
  - 'Descriptive name': |-
      row_item.description if hasattr(row_item, 'description') else ''
  - 'Dependency to add to setup.py': |-
      row_item.dependency_name if hasattr(row_item, 'dependency_name') else ''
  - 'YAML file name to add to `include` statement (optional)': |-
      row_item.include_name if hasattr(row_item, 'include_name') else ''
  - 'Enable by default': |-
      row_item.default if hasattr(row_item, 'default') else ''
rows: |-
  jurisdiction_choices
table: |-
  jurisdiction_choices.table