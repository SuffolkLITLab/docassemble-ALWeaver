---
include:
  - template_validation.yml
  - visual.yml
  - docassemble.ALToolbox:display_template.yml
  - weaver_configuration.yml
---  
metadata:
  title: |
    Interview Weaver: Document Assembly Line
  short title: Weaver
  exit url: https://courtformsonline.org
---
objects:
  - weaver_logo: DAStaticFile.using(filename="logo.svg")
---
default screen parts:
  logo: |
    <img src="${ weaver_logo.url_for() }" class="ma_icon" alt="Assembly Line Weaver Logo" title="ALWeaver">
---
mandatory: True
id: Interview Order
code: |
  process_url_args  
  # Check to see if we are launched from the form explorer, and
  # skip the file validation if so
  if has_safe_pdf_in_url:   
    if im_feeling_lucky:
      process_im_feeling_lucky
  else:   
    weaver_intro
    # skip the file validation if no template input
    interview_type
    set_interview_type_vars 
    if have_template_to_load: 
      interview.uploaded_templates
      if all(map(lambda y: True if y.filename.endswith(".pdf") else False, interview.uploaded_templates)):
        if yes_normalize_fields:
          process_field_normalization
        initial_get_fields
        validate_field_names
        validate_pdf
        if no_recognized_pdf_fields:
          warn_no_recognized_al_labels
        fields_checkup_status
        all_look_good
        validation_success
      elif all(map(lambda y: True if y.filename.endswith(".docx") else False, interview.uploaded_templates)):
        initial_get_fields
        validate_field_names
        if no_recognized_docx_fields:
          warn_no_recognized_al_labels
        validate_docx
      else: # mixed PDF and DOCX templates
        validate_mixed_documents
 
  if have_template_to_load:  
    interview.all_fields.gathered
  # Display Weaver question screens
  interview.jurisdiction_choices
  interview.form_type
  if generate_download_screen:
    interview.intro_prompt #branding screen
    interview.short_title #intro screen
    interview.typical_role #people related questions
    process_people_variables
    ask_people_quantity_question    
  if have_template_to_load: 
    ask_people_quantity_question  
    choose_field_types    
  if not generate_download_screen:    
    no_template_default_values    
  review_fields_after_labeling
  interview.questions.gather()
  
  # Review field order and screen order
  if not (has_safe_pdf_in_url and im_feeling_lucky):
    show_field_order
    show_screen_order
    screen_tbl_done

  # Generate draft interview yaml file
  add_metadata # keep to trigger allowed_court parsing # TODO(qs): fix in output.mako, we shouldn't need to manually trigger
  
  # Assemble output package
  wrote_interview    

  # Display output download screen
  show_interview  
---
features:
  question help button: True
  question back button: True
  css: 
    - styles.css  
    - draggable_table.css
  javascript:     
    - draggable_table.js
---
imports:
  - formfyxer
  - importlib  
  - os
  - pycountry
---
modules:
  - .custom_values
  - .draggable_table
  - .interview_generator
  - .validate_template_files
  - collections
  - docassemble.ALToolbox.misc #collapse_template()
  - docassemble.AssemblyLine.sessions
  - docassemble.base.logger
---
mandatory: True
code: |
  menu_items = [ action_menu_item('Configure Weaver', 'configure_weaver') ]
---
objects:
  - install_step1_status: DAEmpty
  - task_complete: DAEmpty
  - task_status: DAEmpty
  - task_succeeded: DAEmpty
  - weaverdata: DAStore.using(base="docassemble.ALWeaver")
  - upload_template_image: DAStaticFile.using(filename="undraw_upload_re_pasx.svg")
  - start_from_scratch_image: DAStaticFile.using(filename="undraw_start_building_re_xani.svg")
  - browse_library_image: DAStaticFile.using(filename="undraw_collecting_re_lp6p.svg")
  - keep_editing_image: DAStaticFile.using(filename="undraw_filing_system_re_56h6.svg")
  - interview: DAInterview.using(template_path='data/sources/output_patterns.yml')
  - interview_package_download: DAFile
  - screen_order: DAList.using(auto_gather=False)
  - installer: DAWeb.using(base_url=get_config('url root',"https://" + get_config('external hostname',"")) + "/api" )
  - attachments: DAList.using(object_type=DAObject, auto_gather=False)
  - people_quantities: DADict.using(auto_gather=False, gathered=True)
  - next_steps_documents: DADict.using(object_type=DADict)
---
images:
  branding_extra: branding_extra.png
---
id: opening screen
event: weaver_intro
question: |
  Get started with the Weaver
subquestion: |
  Use the Weaver to rapidly build a draft automation for your court or other legal form.
  
  <div class="row row-cols-1 row-cols-md-2 g-2">
    <div class="col">
      <div class="card h-100">
        <img src="${ upload_template_image.url_for() }" class="card-img-top p-2" style="max-height: 15rem;" alt="...">
        <div class="card-body">
          <h5 class="card-title" >Upload a form to automate</h5>
          <p class="card-text">Upload an existing form and answer simple questions to build a draft automation.</p>
          <a id="upload" class="btn btn-primary stretched-link align-self-end" href="${ url_action("choose_first_action", selected_action="upload") }" role="button">Upload and start building</a>
        </div>
      </div>
    </div>
    <div class="col">
      <div class="card h-100">
        <img src="${ start_from_scratch_image.url_for() }" class="card-img-top p-2" style="max-height: 15rem;" alt="...">
        <div class="card-body">
          <h5 class="card-title">Build from scratch</h5>
          <p class="card-text">Follow our guided process to build a custom automation <em>without</em> an existing form.</p>
          <a id="build_from_scratch" class="btn btn-primary stretched-link align-self-end" href="${ url_action("choose_first_action", selected_action="build_from_scratch") }" role="button">Start building</a>
        </div>
      </div>
    </div>
    <div class="col">
      <div class="card h-100">
        <img src="${ browse_library_image.url_for() }" class="card-img-top p-2" style="max-height: 15rem;" alt="...">
        <div class="card-body">
          <h5 class="card-title">Start with a form from the library</h5>
          <p class="card-text">Start your project with our library of 18,000 official state court forms.</p>
          <a id="explore_forms" class="btn btn-primary stretched-link align-self-end" href="https://suffolklitlab.org/form-explorer/list/" role="button">Find my form</a>
          <!-- TODO(#643): replace with dynamic list of forms directly in the Weaver -->
        </div>      
      </div>
    </div>
    <div class="col">
      <div class="card h-100">
        <img src="${ keep_editing_image.url_for() }" class="card-img-top p-2" style="max-height: 12rem;" alt="...">
        <div class="card-body">
          <h5 class="card-title">Load a previous project</h5>
          <p class="card-text">Already started a project? Open it and keep working on it here.</p>
          <a id="load_answer" class="btn btn-primary stretched-link align-self-end" href="${ url_action("browse_weaver_sessions") }" role="button">Continue automating</a>
        </div>
      </div>
    </div>
  </div>
css: |
  <style>
  .question-landing-page div.container {
    max-width: 100rem;
  }
  </style>
right: |
  <br/>
  <br/>
  ${ collapse_template(learn_more) }
---  
template: learn_more
subject: |
  How does it work?
content: |
  1. Start with the template first. Add [standardized 
     labels](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/label_variables)
     to take advantage of built-in questions.
  1. Upload your template and answer all the questions on the screens.
     Smart defaults save you time along the way.
  2. Download your completed interview and get started [customizing](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/customizing_interview) it. 
---
event: choose_first_action
code: |
  if action_argument("selected_action") == "build_from_scratch":
    interview_type = "survey_without_template"
  weaver_intro = True
---
id: choose an output screen
question: |
  What kind of output will your interview have?
fields: 
  - What kind of output do you want?: interview_type
    input type: radio    
    choices:
      - Assemble and download a completed form: regular
      - Just save the answers to a database: survey_with_template
        help: |
          Select this only if your user does not need to download a completed
          form at the end. You can still save answers to a database either way.          
---
id: browse weaver sessions
event: browse_weaver_sessions
question: |
  Existing Weaver sessions
subquestion: |
  ${ session_list_html(filename=user_info().filename, exclude_current_filename=False) }
---
id: file upload screen
question: |
  Upload one or more template files
subquestion: |
  You can upload PDF files, DOCX files, or a mix of the two.

  Before you upload it, your document should be prepared with labeled fields
  that follow our [labelling
  conventions](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/label_variables).

  In some cases, we can automatically process a PDF file that hasn't been
  labeled yet.

  * [Working with 
  PDFs](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/pdfs)
  * [Working with DOCX files](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/docx)
  
fields:   
  - Select your PDF or DOCX files: interview.uploaded_templates
    label above field: True
    datatype: files
    accept: |
      "application/pdf, application/vnd.openxmlformats-officedocument.wordprocessingml.document"
  - Re-process and auto-identify form fields (PDFs, removes existing fields): yes_recognize_form_fields
    datatype: yesno
    help: |
      Use our experimental code to automatically identify boxes and lines. Form fields
      will be added where we think the form author intended the user to type or write-in
      information. If your document already has fields, you don't need this step.
  - Rename fields automatically (PDFs only): yes_normalize_fields
    datatype: yesno
    help: |
      Use our experimental code to automatically apply AssemblyLine naming conventions.
      If you already followed naming conventions, you might want to skip this.
validation code: |
  for document in interview.uploaded_templates:
    if document.mimetype == "application/pdf":
      try:
        document.fix_up()
      except:
        validation_error("Your file may be corrupt. Please try <a href='https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/pdfs#corrupted-or-locked-pdfs'>repairing</a> it.", field="interview.uploaded_templates")
    else:
      try:
        pdf_concatenate(document)
      except:
        validation_error("Unable to convert DOCX file to PDF. It may be an invalid file.")
---
code: |
  # TODO: refactor to use the new config system
  set_custom_people_map( people_variables.true_values() )  

  if len(people_variables.true_values()):
    interview.all_fields.mark_people_as_builtins(people_variables.true_values())
  process_people_variables = True
---
code: |
  # Note: we just use the first document to create the placeholder name even if multiple forms are uploaded.
  # That's fine as it is a placeholder
  if have_template_to_load:
    if interview.uploaded_templates[0].filename.endswith('pdf'):
      interview.short_filename = space_to_underscore(varname(interview.uploaded_templates[0].filename.lower()[:-len(".pdf")]))
    else:
      interview.short_filename = space_to_underscore(varname(interview.uploaded_templates[0].filename.lower()[:-len(".docx")]))
  else:
    interview.short_filename = ''
  interview.short_filename_with_spaces = interview.short_filename.replace('_',' ').capitalize()
---
id: information about court-related info
question: |
  Is your form court-related? 
subquestion: |
  The answers below will help the Weaver to add appropriate post-interview instructions for your user.
fields:
  - Is your form court-related?: interview.court_related
    datatype: yesnoradio
    help: |
      Answer yes if the form lists the name of a court, even if it is not
      filed in a court. We will ask you
      questions that help you list the correct set of courts as options.
  - Kind of form: interview.form_type
    datatype: radio
    choices:
      - Starts a new court case: starts_case
      - Filed in or responding to an existing court case: existing_case
      - Part of an appeal of a court case: appeal
      - Form that is not filed in a court: other_form
      - Other: other
    show if: interview.court_related
  - Kind of form: interview.form_type
    datatype: radio
    choices:
      - Administrative form or other form that is not filed in a court: other_form
      - Letter: letter
      - Other: other
    show if:
      variable: interview.court_related
      is: False
  - Allowed courts: interview.allowed_courts
    datatype: checkboxes
    none of the above: False
    code: |
      get_court_choices() + ['Other']
    show if: interview.court_related
  - Alternate Allowed Courts (separate with a comma): interview.allowed_courts_text
    input type: area
    required: True
    js show if: |
      val("interview.allowed_courts['Other']") && val("interview.court_related")
  - Categories: interview.categories
    datatype: checkboxes
    choices:
      - Housing: HO-00-00-00-00
      - Family: FA-00-00-00-00
      - Domestic Violence and Abuse: FA-07-00-00-00
      - Health: HE-00-00-00-00
      - Estates, Wills, and Guardianships: ES-00-00-00-00
      - Money, Debt, and Consumer Issues: MO-00-00-00-00
      - Unemployment Benefits, Compensation, and Insurance: BE-04-00-00-00
      - Immigration: IM-00-00-00-00
      - Public Benefits: BE-00-00-00-00
      - Education: ED-00-00-00-00
      - Prisoners' Rights: RI-10-00-00-00
      - Other: Other
    none of the above: False
    show if: interview.court_related
  - Other categories (separate with a comma): interview.other_categories
    datatype: area
    rows: 2
    js show if: |
      val("interview.categories['Other']") && val("interview.court_related")
  - Unique label for this interview: interview_label_draft
    default: ${interview.short_filename}
    maxlength: 35
    help: |
      This label should be short but unique. It will be used to name your
      package, the main YAML file, and give a unique label to variables inside
      your document.
  - Link to original form: interview.original_form
    help: |
      Include a link to a page where your user can download the blank form, if
      that exists.
    required: False
    validate: |
      lambda y: (not y or is_url(y)) or validation_error("Write a valid URL, like: https://masslegalhelp.org/my_form")
---
code: |
  interview.default_country_code = 'US'
  # This is weird but needed for check-in logic that refreshes list of states
  # TODO(qs): adjust when we have a way to load in org defaults at runtime
---
event: update_state_list
code: |
  if action_argument('interview.default_country_code') and action_argument('interview.default_country_code') != interview.default_country_code:          
    interview.default_country_code = action_argument('interview.default_country_code')
    background_response('refresh')
  background_response()    
---
id: dependency question
question: |
  Identity, location, and brand
fields:
  - Author name(s) (one per line): interview.author
    datatype: area
    rows: 3
    # TODO(qs): update default if we have a way to load org defaults
    default: |
      % if user_logged_in():
      ${ user_info().first_name } ${ user_info().last_name }
      % else:
      Court Forms Online
      % endif
    required: False
    help: |
      The information in this box will be public by default.
      It will appear on the "About" page of the interview. If you
      save this package to GitHub, it will also appear in your GitHub commit log.
  # TODO(qs): we could add email for github here too, but more complicated
  # and risks inappropriate contact by end users
  - note: |
      ---
  - Default country (for address fields): interview.default_country_code
    code: |
      countries_list()
    default: ${ interview.default_country_code }
  - Default ${ safe_subdivision_type(interview.default_country_code) if safe_subdivision_type(interview.default_country_code) else 'State/Province'}: interview.state
    code: |
        states_list(country_code=interview.default_country_code) if pycountry.subdivisions.get(country_code=interview.default_country_code) else ()
    default: ${ "MA" if interview.default_country_code == 'US' else '' }
    required: False
    
  - note: |
      ---
  - Jurisdiction package: interview.jurisdiction_choices
    datatype: checkboxes
    required: False
    code: |
      get_possible_deps_as_choices('jurisdiction')
  - Branding package: interview.org_choices
    datatype: checkboxes
    required: False
    code: |
      get_possible_deps_as_choices('organization')
  - note: |
      ---
  - Interview YAML template: interview.output_mako_choice
    input type: radio
    code: |
      get_output_mako_choices().keys()
    default: |
      Default configuration:standard AssemblyLine
    help: |
      The generated interview YAML file is controlled by
      a template.

      This setting allows you to change the template that is
      used to create the generated interview. Some organizations
      may want to generate the YAML with blocks in a different
      order or with other changes that aren't possible through settings
      in the Weaver.

      Most authors do not need to customize this value.
check in: update_state_list      
help:
  label: What is this?
  content: |
    You can include default styles, courts, and custom written questions
    that are appropriate for both your jurisdiction (i.e., state-level courts)
    and for your organization.
    
    Leaving the default selections will use packages associated with the 
    Court Forms Online project.
    
    New jurisdictions will be added soon. You should add those dependencies 
    manually in the Playground until then.
---
code: |    
  if not interview.court_related:   
    interview.allowed_courts = DAEmpty()             
    interview.categories = DAEmpty()
---
id: action-oriented splash title
question: |
  Add your form name to the branding page
subquestion: |
  Every interview starts with a "brand" page with a terms of use.
  Add your form's purpose to this page so your user knows they are in
  the right place. Usually, the best way to do this is using 
  action-oriented text to call the user to action. 
  
  Example: "Ask the court for a restraining order" or "Demand your landlord 
  return your security deposit".
  
  Or start with words like "File a...", "Write a...", "Get a..." depending on 
  your form type, followed by your form name.
  
  This is what it looks like:
  
  [FILE branding_extra, 80%]
  
  **Remember:** You can always change this text later in your playground.
fields:
  - Action-oriented text: interview.intro_prompt
    default: ${ interview_intro_prompt_default }
---
code: |
  interview_intro_prompt_default = interview._guess_intro_prompt(interview.short_filename_with_spaces)
---
id: form-specific intro page
question: |
  Form description and "Getting Started" page
subquestion: |
  Use plain language that will be understandable to 
  someone who uses this form without a lawyer.
  
  Do your best to tell your user what they need to know before they
  get started on the form. For example, you may want to tell them about:
  
  1. How much time the form will take to complete.  
  1. Documents to have at hand.
  1. Information they may need to ask someone else for or to look up.
  1. Steps they will need to take before they can deliver the form, 
    such as printing or getting a notary.
  
  **Remember:** you can change the text later in your playground. Start with
  a rough draft.
fields:
  - Title: interview.title
    default: ${ interview.short_filename_with_spaces }
  - Short title that will show up on small screens: interview.short_title
    default: ${ interview.short_filename_with_spaces }
  - Short description of your form: interview.description
    default: ${ interview.short_filename_with_spaces }
    datatype: area
    rows: 2
  - label: |
      "Getting started" page
    field: interview.getting_started
    default: ${ interview.short_filename_with_spaces }
    datatype: area
    help: |
      Tell your user what they need to know before they start the form.
      This helps your user feel prepared and
      prevents frustration later in your interview, especially for longer
      forms. You can use Markdown lists (1. ) and bullets (*) at the beginning
      of a line to add formatting.
---
id: add fields
question: |
  % if have_template_to_load:
  Review fields
  % else:
  Since you don't have a template to load, you can build your questions on this screen
  % endif
subquestion: |
  % if have_template_to_load:
  Take a moment to review the fields your interview already includes:  
  
  % else:
  You will need to define pairs of question/input variable as follows:
  
    1. Click "Add an item".
    1. Type a name for an input variable using the 'snake_case' name convention.
    1. Type a label for this input field.
    1. Pick a field type from the dropdown list.
  
  As you so build your questions, they will be added to the table below for your review.
  
  Later in the Weaver you'll have a chance to edit these fields and rearrange your question order.
  % endif
  
  ${ collapse_template(review_fields_to_add_template) }
  
  Click the button below if you want to add an extra field to your
  interview. This will not add it to your template file.

  ${ interview.all_fields.add_action() }
continue button field: review_fields_after_labeling  
---
template: review_fields_to_add_template
subject: |
  Review fields
content: |
  ${ interview.all_fields.review_table }
---
#code: |
#  interview.all_fields.there_is_another = False
---
table: interview.all_fields.review_table
rows: interview.all_fields + interview.all_fields.builtins()
columns:
  - On-screen label: |
      row_item.label if hasattr(row_item, 'label') else '(n/a)'
  - Field or variable name: |
      f"`{row_item.variable}`"  
  - Field type: |
      showifdef(row_item.attr_name('field_type') )      
---
id: information about people
question: |
  User's role for your form
subquestion: |  
  Knowing user's role and "people variables" in general will help the Weaver 
  to handle those fields accordingly.
fields:
  - note: |
      The list of names below look like names for people, based on
      how you use them in your document.
    show if:
      code: |
        len(interview.all_fields.get_person_candidates(custom_only=True)) > 0
  - Which variable names represent people?: people_variables
    datatype: checkboxes
    code: |
      interview.all_fields.get_person_candidates(custom_only=True)
    help: |
      "person" variables will get things like addresses, multi-part
      names, and proper questions handled automatically. Using them
      will help you save time writing your interview.
  - note: |
      For this ${interview.title} form, is the user of the form typically the 
      Plaintiff/Petitioner or the Defendant/Respondent?

      - The Plaintiff/Petitioner starts a case. 
      - The Defendant/Respondent responds to a case someone else started.
    show if:
      code: |
        interview.form_type != "starts_case"
  - User's role: interview.typical_role
    input type: radio
    choices:
      - Plaintiff/Petitioner: plaintiff
      - Defendant/Respondent: defendant
      - Could be either: unknown
      - None of the above: na
    show if:
      code: |
        interview.form_type != "starts_case"
    help: |
      If form type is an appeal, this is asking about the role in the trial court, not appellate proceeding.
  #- Number of users whose information can be filled in on this form: user_count
  #  choices:
  #    - One user of this form at a time: one
  #    - More than one user can sign and file this form at once: multiple
      
help: |
  For example, if you are starting a new case, you are always the plaintiff
  or petitioner. 
  
  If you are a tenant responding to an eviction case, you are usually the
  Defendant.
  
  If you are responding to an existing case that is not an eviction, you
  might be the defendant, but in some cases you could be the plaintiff.
  
  If you are not sure: please review the form and talk to a subject matter 
  expert. This can always be fixed later.
---
if: interview.form_type == "starts_case"
code: |
  interview.typical_role = "plaintiff"
---
code: |
  # Build the dynamic question code to ask about people quantities
  temp_people_quantity_question = []
  for person in person_candidates:
    temp_people_quantity_question.append({"How many **" + person + "** can appear on this form?": "people_quantities['" + person + "']",
      "datatype": "radio",
      "choices": [{'Exactly 1': 'one'},{'At least one':'more'}]
      })
    # Users can't have 0 elements, but other parties should have the option to be empty
    if person != 'users':
      temp_people_quantity_question[-1]['choices'].append({'Any number, including 0': 'any'})
  people_quantity_question = temp_people_quantity_question
  del temp_people_quantity_question
---
question: |
  Quantify "people variables" on your form
subquestion: |
  This form includes the following variables representing people:
  ${ comma_and_list(person_candidates) }.
  
  % if added_other_party:
  **Note**: Your form includes `defendants/respondents` or
  `plaintiffs/petitioners`. In the interview file, those variables will be
  replaced with `users` and `other_parties` depending on the role the user of
  the form has in the case.
  % endif
  
  The Weaver needs to know how many people each variable can represent.
fields:
  - code: people_quantity_question
help:
  label: |
    What is this about?
  content: |
    By default, all "person" variables are plural.
    
    If you only want one of each person type to ever use this form,
    tell us here. You'll still be able to edit your file if you change
    your mind later.
continue button field: ask_people_quantity_question
---
id: choose field types
continue button field: choose_field_types
question: |
  Create on-screen labels for your fields
subquestion: |  
  Fields in your form will become input variables on the question-screens of your interview. As those field labels can be too technical for your user to understand when displayed on the screen, before you start building the question-screens, here you get to make them more user-friendly.
  
  % if len(interview.all_fields.ask_about_fields()) > 0:
  1. Look at each field below. It represents a blank space on your template.
  1. If the field is handled as a "basic question", it will not be shown
  below. Instead, we will use a pre-written label for it.
  2. Assign each field an on-screen label. The label is shown to the user
  of your form. We start with the name of the field as a label. Edit it so it makes sense.
  2. Double-check the kind of input your field uses, as well as the type
  of data it will hold.
    
  * `yesno` is for true/false checkboxes
  * `text` is a normal text field. `area` is a text field with more room (3 lines by default)
  * `integer` is a whole number, while `number` can have a decimal point. `currency` represents a dollar figure
  * `date` is a standard date picker, which shows a calendar in most browsers.
  % endif
    
fields:
  - code: interview.all_fields.ask_about_fields()
  - note: |
      **Built-in questions this form triggers**[BR]
      % if len(interview.all_fields.builtins()) > 0:
      These fields are not listed above because a built-in question already handles them: `${ comma_and_list(interview.all_fields.builtins()) }`.
      % endif
      % if len(interview.all_fields.signatures()):
      
      These signature fields are not listed because they cannot be asked
      on the same screen as any other variable: `${ comma_and_list(interview.all_fields.signatures()) }`
      % endif      
      
      You will have a chance to change the order of these fields later in
      this interview.
    show if:
      code: |
        len(interview.all_fields.builtins()) or len(interview.all_fields.signatures())
validation code: |
  for field in interview.all_fields.custom():
    if field.field_type == "code":
        expression = f"{field.final_display_var} = {field.code}"
        if not is_valid_python(expression):
            validation_error(f"`{expression}` is not a valid Python expression.", field=field.attr_name("code"))
---
comment: |
  Get the list of fields, and check for any possible labeling errors
  right away
only sets: initial_get_fields
code: |
  for document in interview.uploaded_templates:
    if document.mimetype == "application/pdf":
      errors = get_pdf_validation_errors(document)
      if errors:
        log(errors[1])
        if errors[0] == "parsing_exception":
          parsing_ex = errors[1]
          force_ask('parsing_exception')
        elif errors[0] == "invalid_pdf":
          force_ask('exit_invalid_pdf')
        elif errors[0] == "pseof":
          force_ask('exit_PSEOF_error')
        elif errors[0] == "concatenation_error":
          force_ask("exit_invalid_pdf")
    elif document.mimetype == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
      errors = get_docx_validation_errors(document)
      if errors:
        force_ask('exit_invalid_docx')
      # Check for syntax that indicates a user error
      jinja_errors = get_jinja_errors(document)
      if jinja_errors:
        jinja_exception
      mako_matches = get_mako_matches(document)
      if mako_matches:
        mako_syntax_in_docx
      keywords_in_docx = matching_reserved_names(get_fields(document), keywords_and_builtins_only=True)
      if keywords_in_docx:
        exit_keywords_in_docx
      reserved_names_in_docx = matching_reserved_names(get_fields(document))
      if reserved_names_in_docx:
        warn_reserved_variables_in_docx
      pdf_variable_name_in_docx_matches = get_pdf_variable_name_matches(document)
      if pdf_variable_name_in_docx_matches:
        warn_pdf_variable_names_in_docx
    else:
      force_ask("exit_unknown_file_type")

  interview.all_fields.clear()
  interview.all_fields.add_fields_from_file(interview.uploaded_templates)
  interview.all_fields.gathered = True
  initial_get_fields = True
---
code: |
  interview.all_fields.gathered = True
---
code: |
  if not len(interview.all_fields) > 0:
    force_ask('empty_pdf')
  
  bad_fields = get_variable_name_warnings(interview.all_fields)
  if len(bad_fields) > 0:
    force_ask('non_descriptive_field_name')
  validate_field_names = True
---
code: |
  if have_template_to_load: 
    built_in_people_vars_used = interview.all_fields.get_person_candidates(custom_only=False) - interview.all_fields.get_person_candidates(custom_only=True)
  else:
    built_in_people_vars_used = []

---
need:
  - interview.categories
  - interview.title
  - interview.short_title
  - interview.interview_label
  - interview.description
  - interview.typical_role
code: |
  # TODO(qs): move this into output.mako
  # HACK(brycew): could be a better place to put it, but can't find one :/
  if defined('interview.allowed_courts_text') and len(interview.allowed_courts_text) > 0:
    # 'Other' had to marked true, but is itself useless
    interview.allowed_courts['Other'] = False
    for allowed_court in interview.allowed_courts_text.split(','):
      interview.allowed_courts[allowed_court.strip()] = True

  add_metadata = True
---
generic object: DAObject
code: |
  x.needs_continue_button_field = False
---
code: |
  interview.questions.there_are_any = len(interview.all_fields.custom()) > 0
---
code: |
  # We keep adding questions until ALL of the fields have been
  # assigned.
  interview.questions.there_is_another = interview.has_unassigned_fields()
---
id: create a draft of screen i
question: |
  Create your question screens - the ${ordinal(i)} screen
subquestion: |
  Each screen can define multiple fields at a time. Give this screen
  a title, some context for the screen, and decide which fields are
  shown on this screen.
fields:
  - Make this a purely informational screen: interview.questions[i].is_informational_screen
    datatype: yesno
    help: A screen with no fields, just text.
  - What should the title of this screen be? : interview.questions[i].question_text
    default: Screen ${nice_number(i+1)}
  - What is the text that appears under the title? : interview.questions[i].subquestion_text
    input type: area
    required: False
  - Select the fields that will appear on this screen: interview.questions[i].field_list
    hide if: interview.questions[i].is_informational_screen
    # Can we turn this into an object?
    datatype: object_checkboxes
    # We show all of the fields, but exclude the ones present
    # anywhere in the list of questions we already drafted
    exclude: interview.questions.all_fields_used(all_fields=interview.all_fields.custom())
    none of the above: False
    choices: interview.all_fields.custom()
    object labeler: |
      lambda y: bold(str(y.final_display_var)) + "[BR]" + y.label
  - Override the default logic flow by adding a "continue button field": interview.questions[i].has_mandatory_field
    datatype: noyes
    hide if: interview.questions[i].is_informational_screen
    help: |
      If you are not sure, leave this unchecked.
      You might do this if all of the fields on this
      screen will be optional. You also might do this
      if you want to add show/hide logic on this screen
      which could otherwise break the interview flow.
validation code: |
  if not interview.questions[i].is_informational_screen and len(interview.questions[i].field_list.elements) == 0:
    validation_error("You need to either make this a purely informational screen or select at least one field to appear on this page.")
---
id: download your interview
comment: | 
event: show_interview
question: |
  Congratulations, you have completed your draft interview!
subquestion: |
  <div class="panel_sky" markdown="1">
  #### &#11093; Download the generated interview package
  **If you just started a new interview project**, you need to download the generated interview as a Docassemble package:
  
  ${ action_button_html(interview_package_download.url_for(attachment=True), color='info', label='Download your package') }
  
  ###### Post-download instructions         
  ${ collapse_template(start_your_project) }  
  ${ collapse_template(customize_your_interview) }   
  See detailed instructions _[here.](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/customizing_interview)_  
  </div>
  
  <div class="panel_sky" markdown="1">
  #### &#11093; Download the generated interview yml file
  **If you rerun the Weaver and only want the yml file**, you can just download it below:  
     
  ${ action_button_html(temp_interview.url_for(attachment=True), color='info', label='Download your yaml file') }
  </div>
  
  <div class="panel_lavender" markdown="1">
  #### &#11093; Advanced  
  ###### Review code on the screen
  ${ display_template(yaml_source, copy=True, collapse=True, scrollable=False) } 
  
  ###### Run interview before download
  If you want to test your interview before you leave this screen, click
  the "Install your interview" button. You will have a chance to uninstall
  it once you are done. This can be a quick way to test it interactively 
  before you leave the weaver.
  
  You still need to download and upload the package to your Docassemble
  playground to finish editing and refining it.
  
  % if install_packages_api_key:
  ${ action_button_html(url_action('button_install_package'), label="Install your interview") }
  % else:
  **Sorry, you don't have an API key set up.** Ask your administrator to create
  a Docassemble API key and save it to your configuration file, like this:
  
  ```
  install packages api key: abcdeFGHIJ12345ZEKS
  ```
  % endif  
  </div>
---
template: yaml_source
subject: |
  Preview interview YAML
content: |
  ${ indent_by(interview_mako_output.raw.content, 4) }

---
code: |
  # This was handled differently in the original wizard Jonathan made. Backfilling this attribute
  interview.questions[i].type = 'question'
---
code: |
  # This was handled differently in the original wizard Jonathan made. Backfilling this attribute
  interview.all_fields[i].has_label = True
---
code: |
  # Used for adding a new field
  interview.all_fields[i].field_type_guess = interview.all_fields[i].field_type
  interview.all_fields[i].raw_field_names = [interview.all_fields[i].variable]
  interview.all_fields[i].source_document_type = "docx" # don't process the variable name
---
code: |
  person_candidates_temp = set(people_variables.true_values()).union(set(built_in_people_vars_used))
  # We need to do special processing of the list of people used to build
  # the objects block in the generated interview.
  # users should always appear
  # defendants / plaintiffs / petitioners / respondents should never appear
  # They get defined as an alias to users or other_parties
  # other_parties should appear if we have both defendants and plaintiffs
  person_candidates_temp.add('users')
  has_other_party = 'other_parties' in person_candidates_temp
  added_other_party = False
  if ('defendants' in person_candidates_temp and 'plaintiffs' in person_candidates_temp) or ('respondents' in person_candidates_temp and 'petitioners' in person_candidates_temp):
    person_candidates_temp.add('other_parties')
    if not has_other_party:
      added_other_party = True
  
  person_candidates_temp.discard('petitioners')
  person_candidates_temp.discard('respondents')
  person_candidates_temp.discard('plaintiffs')
  person_candidates_temp.discard('defendants')
  
  person_candidates = person_candidates_temp
  del person_candidates_temp   
---
need:
  - built_in_people_vars_used
  - person_candidates
  - people_quantities
code: |
  # TODO(qs): this should have a better API
  # Create objects block that specifies the number of people for
  # the developer. Switches between target_number and there_are_any list gathering
  # approaches
  objects = DAList("objects", object_type=DAObject, auto_gather=False)
  for person in person_candidates:
    new_object = objects.appendObject()
    new_object.name = person
    new_object.type = "ALPeopleList"
    new_object.params = {}
    if person in people_quantities:
      if people_quantities[person] == 'one':
        new_object.params = {
          "ask_number": True, 
          "target_number": 1,
          }
      elif people_quantities[person] == 'more':
        new_object.params = {
          "there_are_any": True,
          }            
  objects.gathered=True
---
############ Stuff for reviewing interview #####################################
---
code: |
  # This will add the questions and built-in fields to the screen_order 
  # list. This will allow the developer to reorder questions without needing
  # to restart the interview
  # TODO: do we want to use this to nudge a recommended question order?
  screen_order.clear()
  for question in interview.questions:
    screen_order.append(question)
  
  # Note that some built-in fields are not unique screens. This could
  # mess up the count
  unique_fields = set()
  for field in interview.all_fields.builtins():
    # Don't add the users[0].signature field to this list
    if field.final_display_var == "users[0].signature":
      continue
    if not field.final_display_var in unique_fields:
      unique_fields.add(field.final_display_var)
      screen_order.append(field)
  for field in interview.all_fields.signatures():
    screen_order.append(field)
  screen_order.gathered = True
  set_initial_screen_order = True
---
table: screen_order.table
rows: screen_order
columns:
  - Order: |
      int(screen_order.index(row_item)) + 1  
  - Screen: |
      row_item.question_text if isinstance(row_item, DAQuestion) else row_item.variable_name_guess if isinstance(row_item, DAField) else 'N/A'
  - Number of fields: |
      len(row_item.field_list) if isinstance(row_item, DAQuestion) else 'N/A'
---
table: interview.questions[i].edit_table
rows: interview.questions[i].field_list
columns:
  - Order: |
      int(interview.questions[i].field_list.index(row_item)) + 1  
  - Field name: |
      row_item.final_display_var
edit:
  - edit_field
delete buttons: False  
---
code: |
  interview.questions[i].field_list.there_are_any = interview.questions[i].field_list.number() > 0
---
code: |
  # not quite sure why we need this--problem w/ how docassemble handles
  # editing lists created with object_checkboxes
  interview.questions[i].field_list.there_is_another = False
---
continue button field: interview.all_fields[i].edit_field
question: |
  % if hasattr(interview.all_fields[i], 'final_display_var'):
  Edit field ${ bold(interview.all_fields[i].final_display_var) }
  % else:
  Add new field
  % endif
subquestion: |
  % if not hasattr(interview.all_fields[i], 'final_display_var'):
  You can use this screen to add a draft of a new field that will
  be asked about in your interview.
  % endif

  % if not hasattr(interview.all_fields[i], 'final_display_var') and have_template_to_load:
  When you add a new field, it will not automatically be included
  in your template. You can use this feature to add fields that are used to
  calculate a value, for example.
  % endif
fields:
  - Docassemble variable name, in `snake_case`: interview.all_fields[i].variable
    show if:
      code: |
        not hasattr(interview.all_fields[i], 'label')
    validate: |
      lambda y: y.isidentifier() or validation_error("Use a valid Python variable name, without spaces and starting with a letter.")
  - On-screen label or prompt: interview.all_fields[i].label
  - Field type: interview.all_fields[i].field_type
    choices:
      - text
      - area
      - yesno
      - integer
      - number
      - currency
      - date
      - email
      - multiple choice radio
      - multiple choice checkboxes
  - Options (one per line): interview.all_fields[i].choices
    datatype: area
    js show if: |
      val('interview.all_fields[i].field_type') === 'multiple choice radio' || val('interview.all_fields[i].field_type') === 'multiple choice checkboxes'
    hint: |
      Like 'Descriptive name: key_name', or just 'Descriptive name'
validation code: |
  for field in interview.all_fields:
    if not hasattr(field, 'final_display_var'):
      field.final_display_var = field.variable
continue button label: Save
back button label: Cancel
---
continue button field: interview.questions[i].edit_question
scan for variables: False
sets: interview.questions[i].edit_question
question: |
  Review your ${ ordinal(i) } screen
subquestion: |    
  <div style="text-align:right; font-style: italic">[Skip these screens anytime: ${ action_button_html(url_action('let_skip'),
                        label='Skip',
                        size='md',
                        color='primary') }]</div>
                        
  1. You can modify **Screen title** and **Text on your question screen** here and they will be reflected in the generated draft interview.   
fields:
  - Screen title: interview.questions[i].question_text
  - Text on your question screen: interview.questions[i].subquestion_text
    datatype: area
    required: False
  - note: |
      2. Click **Edit** below to modify individual field's label and type if needed.
      3. After all the edits are done, you can **reorder** the fields in the table by **grabbing anywhere in a row and dragging it to the desired position.** _If you reorder fields before clicking Edit, you'll need to readjust field order after editing._   
      ${ interview.questions[i].draggable_fld_table }   
  - no label: interview.questions[i].fld_order_list 
    datatype: draggable_tbl_order_list    
    required: False
  - no label: interview.questions[i].table_data 
    datatype: draggable_tbl_json_string
    required: False

---
continue button field: show_screen_order
question: |
  Review your screen order
subquestion: |          
  You can reorder your screens by **grabbing anywhere in a row and dragging it to the desired position.** 

  ${ draggable_scr_table } 
  
  **NOTE:** All of the built-in fields are listed together, regardless of whether they appear together on one screen. For that reason, you don't need to reorder those rows.    
fields:
  - no label: scr_order_list 
    datatype: draggable_tbl_order_list
    required: False
  - no label: scr_table_data
    datatype: draggable_tbl_json_string    
    required: False
---
##################################### Controlling generated interview contents ################
---
code: |
  # This interview.interview_label field is used throughout the 
  # generated interview to let us store interview-specific
  # metadata
  # We removed random ID, so make sure the file names are unique
  # varname will strip leading numbers--but they may be valid at the end of the label
  interview.interview_label = (varname(interview_label_draft) if varname(interview_label_draft) else varname('ending_variable_' + interview_label_draft))
---
code: |
  attachment_variable_name = interview.interview_label + '_attachment'
---
template: start_your_project
subject: |
  To start your project after download:
content: |  
  1. Go to your _Playground_ to add a new project.
  2. Open the new project's _Packages_ folder.
  3. Use the third icon _Upload_ to install this package.
  4. Go back to Playground, delete test.yml file, now you can see your interview file.  
---
template: customize_your_interview
subject: |
  To customize your interview:
content: |  
  1. Start by running your interview. Make a note of anything you want to 
     change.  
  2. **Next steps** instruction file: we created a starting point for a cover page that your form's users will use. Edit this file so it has appropriate instructions for your form. 
  3. Customize the wording, reorder questions, and make the interview your
     own! 
---
attachment:
  variable name: interview_mako_output
  name: YAML output
  filename: interview.yml
  raw: True
  content file:
    code: |
      ["output_defs.mako", get_output_mako_package_and_path(interview.output_mako_choice)]
---
code: |
  sanitized_filename = f"{interview.interview_label}.{interview.uploaded_templates[0].extension}"
---
code: |
  # Unfortunately, there's no good "new" name for the file
  # when someone uploads multiple templates at once
  if have_template_to_load and len(interview.uploaded_templates) == 1:
    interview.uploaded_templates[0].set_attributes(filename=sanitized_filename)
  inflate_renamed_upload = True
---
need:
  - inflate_renamed_upload
  - interview.author
  - generate_download_screen
# Prepare content for the Weaver's download screen.
code: |
  interview.dependencies = get_pypi_deps_from_choices(
            interview.jurisdiction_choices.true_values() +
            interview.org_choices.true_values()
  )

  #HACK: Docassemble bug:
  # - stops us from using interview_label.yml as the original filename, and
  # - stops us from just renaming the file instead of making a copy.
  #TODO(#689) should fix this
  temp_interview = DAFile(filename = f"{ interview.interview_label }.yml")
  temp_interview.initialize()
  temp_interview.copy_into(interview_mako_output.raw)
  temp_interview.commit()

  interview.create_package(temp_interview, generate_download_screen, output_file=interview_package_download)

  wrote_interview = True
---
############ Next Steps documents generation ################
comment: |
  All of the below code is split into separate code blocks so it doesn't generate all docs when we only need 1
code: |
  next_steps_documents['starts_case']['attachment'] = next_steps_starts_case
---
code: |
  next_steps_documents['existing_case']['attachment'] = next_steps_existing_case
---
code: |
  next_steps_documents['appeal']['attachment'] = next_steps_appeal
---
code: |
  next_steps_documents['letter']['attachment'] = next_steps_letter
---
code: |
  next_steps_documents['other_form']['attachment'] = next_steps_other_form
---
code: |
  next_steps_documents['other']['attachment'] = next_steps_other
---
attachments:
  - variable name: next_steps_starts_case
    docx template file: next_steps_starts_case.docx
    filename: ${ interview.interview_label + '_next_steps' }
---
attachments:
  - variable name: next_steps_existing_case
    docx template file: next_steps_existing_case.docx
    filename: ${ interview.interview_label + '_next_steps' }    
---
attachments:
  - variable name: next_steps_appeal
    docx template file: next_steps_appeal.docx
    filename: ${ interview.interview_label + '_next_steps' }    
---
attachments:
  - variable name: next_steps_letter
    docx template file: next_steps_letter.docx
    filename: ${ interview.interview_label + '_next_steps' }    
---
attachments:
  - variable name: next_steps_other_form
    docx template file:  next_steps_other_form.docx
    filename: ${ interview.interview_label + '_next_steps' }    
---
attachments:
  - variable name: next_steps_other
    docx template file:  next_steps_other.docx
    filename: ${ interview.interview_label + '_next_steps' }
---
code: |
  interview.instructions = next_steps_documents[interview.form_type]['attachment'].docx  
---
#######################################
# Code to support github feedback form
---
code: |
  try:
    package_version_number = str(importlib.import_module(user_info().package).__version__)
  except:
    package_version_number = "playground"
---
code: |
  # Leaving this in but in this package, it will
  # always be docassemble-ALWeaver, unless an org
  # forks this for their own jurisdiction
  package_name = str(user_info().package)
  if package_name and not "playground" in package_name:
    github_repo_name = package_name.replace('.','-')
  else:    
    github_repo_name = "docassemble-ALWeaver"
---
code: |
  if install_package_task.ready():
    run_package
  else:
    waiting_screen
  run_package    
  button_install_package = True
---
code: |
  if uninstall_package_task.ready():
    show_interview
  else:
    waiting_screen_uninstall
  show_interview    
  button_uninstall_package = True  
---
id: run package
event: run_package
question: |
  Preview your package
subquestion: |
  % if not showifdef('install_step1_status') or (defined('task_status') and (not task_status or not task_succeeded)):
  Something went wrong with package installation, sorry.
  % elif not defined('task_status') or (defined('task_status') and task_status and not task_complete):
  Please wait, the interview is not ready to run yet.
  
  <i class="fas fa-spinner fa-pulse"></i> 
  % else:  
  ${ action_button_html(interview_url(reset=1, i="docassemble." + interview.package_title + ":data/questions/" + interview.interview_label + '.yml'), label = "Run interview", new_window=True ) }
  % endif

  ${ action_button_html(url_action('button_uninstall_package'),label="Uninstall interview", color="danger") }
  
  ${ collapse_template(yaml_source) }
  
  Download the YAML file only:  
  [:download: Download YAML](${interview_mako_output.raw.url_for(attachment=True)})
  
  Download the interview as a Docassemble package:  
  [:download: Download Package](${interview_package_download.url_for(attachment=True)})
check in: set_final_package_install_status
---
code: |
  install_packages_api_key = get_config('install packages api key')
---
code: |
  install_package_task = background_action('install_package_event')
---
code: |
  uninstall_package_task = background_action('uninstall_package_event')
---
event: uninstall_package_event
code: |
  data = {"key": install_packages_api_key,
          "package": "docassemble." + interview.package_title
          }
  status = installer.delete("package", data=data)
  background_response()            
---
event: install_package_event
code: |
  data = {"key": install_packages_api_key
          }
  files = {'zip': interview_package_download }
  status = installer.post("package",data=data, files=files, task='install package')  
  # clear the interview cache
  installer.post("clear_cache", data = {"key": install_packages_api_key } )
  background_response_action('save_status_to_answers', status=status)
---
event: save_status_to_answers
code: |
  # Save the background install status to the foreground
  install_step1_status = action_argument('status')
  background_response()
---
event: set_final_package_install_status
code: |
  data = {"key": install_packages_api_key,
          "task_id": install_step1_status.get("task_id")
          }
  task_status = installer.get('package_update_status', data=data)
  if task_status:
    task_complete = task_status.get('status') == 'completed'
    task_succeeded = task_status.get('ok') == True
    log(str(task_status))
  if task_status and task_complete:
    if task_complete:
      log('Installation finished. Success: ' + str(task_status.get('ok')))
      background_response('refresh')
  background_response_action()
---
event: save_final_status_to_answers
code: |
  # Save the background install status to the foreground
  install_final_status = action_argument('status')
  background_response()
---  
event: waiting_screen
question: |
  Please wait while the package is installed
reload: True    
---  
event: waiting_screen_uninstall
question: |
  Package is being uninstalled, please wait here
reload: True
#----------------------------------------------------
# Code blocks for Drag-and-drop table
#----------------------------------------------------
---
comment: |
  This block is called when the "screen table" is initially loaded.
code: |
  # Initialize the hidden field. It'll be updated in js
  scr_order_list = '' # Will be updated in js
  scr_table_data = '' # Will be updated in the next code block
  
  # Make the screen table draggable
  html_scr_table = make_it_draggable(screen_order.table)
  original_scr_order = html_scr_table[0] #list
  draggable_scr_table = html_scr_table[1] #soup table    
---
comment: |
  This block is called after the "screen table" is reordered by the user.  
code: |   
  if len(scr_order_list) > 0:        
    # Update existing scr table order var - will affect output interview layout
    screen_reordered = update_table_order_var(original_scr_order, scr_order_list, screen_order)   
    
    # Save new table data to the hidden field for JS to access
    scr_table_data = make_json(scr_order_list, draggable_scr_table)
  else:      
    screen_reordered = screen_order    
      
  screen_tbl_done = True   
---
comment: |
  This block is called when the "field table" is initially loaded.
code: |
  # Initialize the hidden fields. 
  interview.questions[i].fld_order_list = '' # Will be updated in js
  interview.questions[i].table_data = ''     # Will be updated in the next code block
  
  # Make the field table draggable  
  interview.questions[i].html_fld_table = make_it_draggable(interview.questions[i].edit_table) 
  interview.questions[i].original_fld_order = interview.questions[i].html_fld_table[0] #list
  interview.questions[i].draggable_fld_table = interview.questions[i].html_fld_table[1] #soup table
---
comment: |
  This block is called after the "field table" is reordered by the user.
code: |     
  if len(interview.questions[i].fld_order_list) > 0:    
    # Update existing fld table order var - will affect output interview layout
    interview.questions[i].field_list = update_table_order_var(interview.questions[i].original_fld_order, interview.questions[i].fld_order_list, interview.questions[i].field_list)
    
    # Save new table data to the hidden field for JS to access    
    interview.questions[i].table_data = make_json(interview.questions[i].fld_order_list, interview.questions[i].draggable_fld_table)    
    
  interview.questions[i].field_tbl_done = True  
---
# Loop thru all the field tables and display them on the screen
code: |  
  for index in range(0, len(interview.questions)):      
    interview.questions[index].edit_question     
    interview.questions[index].field_tbl_done 
  show_field_order = True
---
event: let_skip
code: |
  show_field_order = True
  force_ask('show_screen_order')
#----------------------------------------------------
# Code blocks for survey type interviews  
#----------------------------------------------------
---
# Set default values if no template file to upload
only sets: no_template_default_values
code: |
  if not have_template_to_load:
    interview.all_fields.gathered = True
  interview.original_form = 'NA'
  interview.typical_role = 'anonymous'
  interview_label_draft = interview.short_title
  
  no_template_default_values = True
---
code: |
  if 'without_template' in interview_type:
    have_template_to_load = False
  else:
    have_template_to_load = True
    
  if 'survey' in interview_type:
    generate_download_screen = False
  else:
    generate_download_screen = True
    
  set_interview_type_vars = 'Done'
---
################ I'm feeling lucky feature ###################
---
id: feeling lucky
question: |
  Are you feeling lucky?
subquestion: |
  You can go straight to a runnable prototype of
  "${ interview.short_filename_with_spaces }" for ${ state_name(interview.state) },
  or you can customize this prototype. 

field: im_feeling_lucky
buttons: 
  - Customize: False
  - "I'm feeling lucky": True
---
code: |
  has_safe_pdf_in_url = url_args.get('form_to_use') and url_args.get('form_to_use').startswith('https://courtformsonline.org')
---
code: |
  # sample URL: https://apps-dev.suffolklitlab.org/interview?i=docassemble.playground10WeaverBugs%3Aassembly_line.yml&reset=1&cache=0&new_session=1&form_to_use=https://courtformsonline.org/forms/d2eea048cc217c0120450f746fc867d1d6ef42130c85fcd26966a352.pdf&title=Demand+for+Possession%2C+Termination+of+Tenancy+Due+to+Unlawful+Drug+Activity+on+Premises%2C+Landlord-Tenant+%28two-page+form%29&jur=MI&nsmi=[%27HO-06-00-00-00%27,%20%27HO-00-00-00-00%27]
  # Let someone bootstrap an interview from the form explorer
  interview.original_form = url_args.get('form_to_use')
  if has_safe_pdf_in_url:
    interview.auto_assign_attributes(url_args.get('form_to_use'),
                                     title=url_args.get('title'),
                                     categories=url_args.get('nsmi'),
                                     jurisdiction=url_args.get('jur'),
    )
    interview_label_draft = interview.short_filename
  url_args.clear()    
  process_url_args = True  
---
only sets: 
  - process_im_feeling_lucky
code: |
  yes_normalize_fields = False
  yes_recognize_form_fields = False
  interview_type = "regular"
  if has_safe_pdf_in_url: # limit when this block can run
    # TODO: refactor this at some point, this is a shim to create objects block but we
    # shouldn't need it forever.
    person_candidates = interview.all_fields.get_person_candidates()
    for person in person_candidates:
      people_quantities[person] = "any"
    process_people_variables = True
    
    # Skip some screens we don't need
    ask_people_quantity_question = choose_field_types = show_screen_order = review_fields_to_add_template = review_fields_after_labeling = True

  process_im_feeling_lucky = True
