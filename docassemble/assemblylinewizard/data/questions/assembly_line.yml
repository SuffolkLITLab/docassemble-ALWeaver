metadata:
  title: Document assembly wizard
  short title: Wizard
  tags:
    - HO-00-00-00-00 #Housing
    - FA-00-00-00-00 #Family
    - FA-07-00-00-00 #Domestic Violence and Abuse
    - HE-00-00-00-00 #Health
    - ES-00-00-00-00 #Estates, Wills, and Guardianships
    - MO-00-00-00-00 #Money, Debt, and Consumer Issues     
    - BE-04-00-00-00 #Unemployment Benefits, Compensation, and Insurance
    - IM-00-00-00-00 #Immigration     
    - BE-00-00-00-00 #Public Benefits
    - ED-00-00-00-00 #Education
    - RI-10-00-00-00 #Prisoners' Rights
---
features:
  question help button: True
  # labels above fields: True
---
modules:
  - docassemble.base.util
  - docassemble.base.logger
  - .interview_generator
  - .generator_constants
---
objects:
  - generator_data: DAStore.using(base='interview', encrypted=False) # store sequential use of this generator
  - interview: DAInterview
  - main_code: DAQuestion
  - metadata_code: DAQuestion
  - metadata: DAQuestion
  - modules: DAQuestion
  - sections: DAQuestion
  - attachments: DAAttachmentList
  - preview_attachments: DAAttachmentList
  - built_in_fields_used: DAFieldList.using(gathered=True)
  - fields: DAFieldList.using(gathered=True)
  - signature_fields: DAFieldList.using(gathered=True)
  - questions: DAQuestionList.using(complete_attribute='question_text')
  - interview_download: DAFile
  - interview_package_download: DAFile
---
code: |
  # we use this to ensure that each interview gets a unique key
  sequence = generator_data.get('sequence') or 0
---
code: |
  generator_data.set('sequence',sequence+1)
  increment_sequence = True
---
comment: |
  This is a list of some variables we leave alone (don't transform)
  but still represent something we're handling in basic-question.yml
  No need to prompt the user to group these questions.
  # TODO: this is really handled in the generator constants now
variable name: variables_to_skip
data:
  - signature_date
  - plaintiff
  - plaintiffs
  - defendant
  - defendants
  - petitioner
  - petitioners
  - witnesses
  - users
  - other_parties
  - children
---
mandatory: True
id: Interview Order
code: |
  template_upload
  # debug
  get_all_fields
  interview.title
  interview_intro_prompt
  interview.typical_role  
  ask_people_quantity_question  
  add_includes
  set_metadata # Adds metadata block to the interview as first block
  add_short_title
  add_form_type
  add_sections
  choose_field_types
  questions.gather()
  
  add_objects_block
  add_logic_tree
  add_draft_intro_screen
  created_preview_question
  add_questions_to_interview
  created_attachment
  add_review_screen
  wrote_interview
  increment_sequence

  show_interview
---
continue button field: debug
question: |
  ${ template_upload }
---
id: opening screen
question: |
  Assembly Line Wizard
subquestion: |
  Use this tool to turn a PDF or Word document into a draft
  interactive online form.
  
  This tool is part of the [Doc Assembly 
  Line](https://suffolklitlab.org/doc-assembly-line/)
  project.
fields:
  - Select a PDF or Word template: template_upload
    datatype: file
help: |
  This interview has been run ${sequence} times.
---
code: |
  if template_upload[0].filename.endswith('pdf'):
    short_filename = template_upload[0].filename[:-4]
  else:
    short_filename = template_upload[0].filename[:-5]
  
  short_filename_with_spaces = short_filename.replace('_',' ').capitalize()
---
id: information about this interview
question: |
  Information about this interview
subquestion: |
  Put in draft information about this form below.
  
  Use plain language that will be understandable to someone who
  uses this form without a lawyer. Remember, we can change it later.
  
  % if len(all_fields) != len(fields) + len(signature_fields) + len(built_in_fields_used):
  ** There may be a problem with this file. Check for the wrong number
  of fields**
  % endif
fields:
  - Title: interview.title
    default: ${short_filename_with_spaces}
  - Short name: interview.short_title
    default: ${short_filename_with_spaces}
  - Description: interview.description
    datatype: area
    default: ${short_filename_with_spaces}
  - Kind of form: interview.form_type
    datatype: radio
    choices:
      - Starts a new court case: starts_case
      - Part of an existing court case: existing_case
      - Appeal: appeal
      - Form that is not filed in a court: other_form
      - Letter: letter
      - Other: other
  - Allowed courts: interview.allowed_courts
    datatype: checkboxes
    none of the above: false
    code: |
      get_court_choices() + ['Other']
  - Alternate Allowed Courts (separate with a comma): interview.allowed_courts_text
    input type: area
    required: False
    show if: interview.allowed_courts['Other']
  - Categories: interview.categories
    datatype: checkboxes
    choices:
      - Housing: HO-00-00-00-00
      - Family: FA-00-00-00-00
      - Domestic Violence and Abuse: FA-07-00-00-00
      - Health: HE-00-00-00-00
      - Estates, Wills, and Guardianships: ES-00-00-00-00
      - Money, Debt, and Consumer Issues: MO-00-00-00-00
      - Unemployment Benefits, Compensation, and Insurance: BE-04-00-00-00
      - Immigration: IM-00-00-00-00
      - Public Benefits: BE-00-00-00-00
      - Education: ED-00-00-00-00
      - Prisoners' Rights: RI-10-00-00-00
      - Other: Other
  - Other categories (separate with a comma): interview.other_categories
    datatype: area
    rows: 2
    show if: interview.categories['Other']
  - Unique label for this interview: interview.file_name
    default: ${short_filename}
    help: |
      This label should be unique across all interviews. It will be
      used to name the file as well as an internal label for the Docassemble
      coder.
      
      It won't be shown to the end user.
  - Link to original form: interview.original_form
    hint: http://masslegalhelp.org/my_form
    required: False
help: |
  There are ${len(all_fields)} fields total.
  
  `${all_fields}`
  
  * ${len(fields)} Fields we'll ask about
  * ${len(built_in_fields_used)} built-in fields
  * ${len(signature_fields)} signature fields
  
  ${fields}
---
code: |
  if interview.form_type == 'starts_case':
    interview_intro_prompt_default = "Ask the court for a " + interview.short_title
  elif interview.form_type == 'existing_case':
    interview_intro_prompt_default = "File a " + interview.short_title 
  elif interview.form_type == 'letter':
    interview_intro_prompt_default = "Write a " + interview.short_title
  else:
    interview_intro_prompt_default = "Get a " + interview.short_title
---
id: action title
question: |
  Action title
subquestion: |
  Your interview will include a branded splash page. This screen
  has a place to mention the name of the form. Usually, the best way
  to do this is in the form of an action.
  
  Example: "Ask the court for a restraining order" or "Demand your landlord
  return your security deposit".

  What action title do you want?
fields:
  - Action title: interview_intro_prompt
    default: ${ interview_intro_prompt_default }
---
id: information about people
question: |
  Information about people on this form
subquestion: |  
  For this ${interview.title} form, is the user of the form typically the 
  Plaintiff/Petitioner or the Defendant/Respondent?

  The Plaintiff/Petitioner starts a case. The Defendant/Respondent
  is responding to a case someone else started.
fields:
  - note: |
      The list of names below look like names for people, based on
      how you use them in your document.
    show if:
      code: |
        len(get_person_variables(all_fields, custom_only=True)) > 0
  - Which variable names represent people?: people_variables
    datatype: checkboxes
    code: |
      get_person_variables(all_fields, custom_only=True)
    help: |
      "person" variables will get things like addresses, multi-part
      names, and proper questions handled automatically. Using them
      will help you save time writing your interview.
  - User's role: interview.typical_role
    input type: radio
    choices:
      - Plaintiff/Petitioner: plaintiff
      - Defendant/Respondent: defendant
      - Could be either: unknown
  #- Number of users whose information can be filled in on this form: user_count
  #  choices:
  #    - One user of this form at a time: one
  #    - More than one user can sign and file this form at once: multiple
      
help: |
  For example, if you are starting a new case, you are always the plaintiff
  or petitioner. 
  
  If you are a tenant responding to an eviction case, you are usually the
  Defendant.
  
  If you are responding to an existing case that is not an eviction, you
  might be the defendant, but in some cases you could be the plaintiff.
  
  If you are not sure: please review the form and talk to a subject matter 
  expert. This can always be fixed later.
---
objects:
  - people_quantities: DADict.using(auto_gather=False, gathered=True)
---
code: |
  # Build the dynamic question code to ask about people quantities
  temp_people_quantity_question = []
  for person in people_variables.true_values().union(built_in_people_vars_used):
    temp_people_quantity_question.append({"How many **" + person + "** can appear on this form?": "people_quantities['" + person + "']",
      "datatype": "radio",
      "choices": [{'Exactly 1': 'one'},{'One or more':'more'}]
      })
  people_quantity_question = temp_people_quantity_question
  del temp_people_quantity_question
---
question: |
  Information about people
subquestion: |
  This form includes the following variables representing people:
  ${ comma_and_list(people_variables.true_values().union(built_in_people_vars_used)) }
fields:
  - code: people_quantity_question 
help:
  label: |
    What is this about?
  content: |
    By default, all "person" variables are plural.
    
    If you only want one of each person type to ever use this form,
    tell us here. You'll still be able to edit your file if you change
    your mind later.
continue button field: ask_people_quantity_question  
---
comment: |
  Get the list of fields
code: |
  if template_upload[0].extension == 'pdf':
    all_fields = template_upload.get_pdf_fields()
  else:
    all_fields = get_fields(template_upload) # template_upload.get_docx_variables()
---
code: |
 built_in_people_vars_used = get_person_variables(all_fields, custom_only=False) - get_person_variables(all_fields, custom_only=True)
---
comment: |
  Convert the PDF fields into Docassemble fields
code: |
  # These all must be defined in advance to avoid duplicates
  all_fields
  variables_to_skip
  fields
  signature_fields
  built_in_fields_used  
  
  if template_upload[0].extension == 'pdf':
    # Probably all of this should move into a class
    for pdf_field_tuple in all_fields:
      pdf_field_name = pdf_field_tuple[0]
      # Check to see if we think this field is built-in (handled in
      # basic-questions.yml), a signature, or an arbitrary field.
      is_reserved_name = is_reserved_label(pdf_field_name)
      if is_reserved_name or pdf_field_name in variables_to_skip:
        new_field = built_in_fields_used.appendObject()
      elif pdf_field_tuple[4] == '/Sig':
        new_field = signature_fields.appendObject()
      else:
        new_field = fields.appendObject()
      
      # This function determines what type of variable
      # we're dealing with
      new_field.fill_in_pdf_attributes(pdf_field_tuple)    
  else:
    # if this is a docx, fields are a list of strings, not a list of tuples
    for field in all_fields:
      if is_reserved_docx_label(field):
        new_field = built_in_fields_used.appendObject()
      elif field.endswith('.signature'):
        new_field = signature_fields.appendObject()
      else:                
        new_field = fields.appendObject()
      new_field.fill_in_docx_attributes(field)
    
  get_all_fields = True
---
code: |
  interview.field_list = fields
---
code: |
  # Build the list of includes
  include_question = interview.blocks.appendObject()
  include_question.type = 'includes'
  # TODO: add a graphical element to select something other than
  # massaccess.yml
  include_question.includes = ['docassemble.AssemblyLine:al_package.yml', 'docassemble.MassAccess:massaccess.yml']
  add_includes = True
---
code: |
  short_title_block = interview.blocks.appendObject()
  short_title_block.type = 'code'
  short_title_block.code = "interview_short_title = '" + interview_intro_prompt + "'"
  add_short_title = True
---
code: |
  form_type_block = interview.blocks.appendObject()
  form_type_block.type = 'code'
  form_type_block.code = "al_form_type = '" + interview.form_type + "'"
  add_form_type= True
---
code: |
  # Build list of section headings
  # Our current interview only uses one
  sections.comment = """Section headings appear on the left and can be clicked
  upon to visit an event (usually a review screen) with the section's variable
  name.
  Normally you will break up the review screen into multiple pages
  to show progress."""
  sections.type = "sections"
  sections.sections = [{"review_" + interview_label: "Review your answers"}]
  interview.questions.append(sections)
  add_sections = True
---
code: |
  # Create an introduction question
  intro_question = interview.questions.appendObject()
  intro_question.type = 'interstitial'
  intro_question.comment = "This question is used to introduce your interview. Please customize"
  intro_question.continue_button_field = interview_label + '_intro'
  intro_question.question_text = interview.title
  intro_question.subquestion_text = interview.description
  add_draft_intro_screen = True
---
code: |
  # HACK(brycew): could be a better place to put it, but can't find one :/
  if defined('interview.allowed_courts_text') and len(interview.allowed_courts_text) > 0:
    # 'Other' had to marked true, but is itself useless
    interview.allowed_courts['Other'] = False
    for allowed_court in interview.allowed_courts_text.split(','):
      interview.allowed_courts[allowed_court.strip()] = True
  # Build the dictionary of info we want the interview
  # to know about itself.
  metadata.comment = 'The metadata section controls the tab title and saved interview title. You can delete this section if you include this YAML file in another YAML file.'
  metadata.type = 'metadata'
  metadata.categories = interview.categories
  metadata.settings = {
                        'title': interview.title,
                        'short title': interview.short_title}  

  metadata_code.comment = "This section is used by MAVirtualCourts to control how some of the questions work."
  metadata_code.type = 'metadata_code'
  metadata_code.interview_label = interview_label
  metadata_code.interview = interview
  metadata_code.file_name = interview.file_name
  metadata_code.title = interview.title
  metadata_code.short_title = interview.short_title
  metadata_code.description = interview.description
  metadata_code.original_form = interview.original_form
  metadata_code.allowed_courts = interview.allowed_courts
  metadata_code.categories = interview.categories
  metadata_code.other_categories = interview.other_categories if defined('interview.other_categories') else None
  metadata_code.typical_role = interview.typical_role
  interview.blocks.append(metadata)
  interview.blocks.append(metadata_code)
  set_metadata = True
---
code: |
  # Create code for the question that we use to label
  # each field.
  
  temp_field_question = []
  for index, field in enumerate(fields.elements):
    temp_field_question.extend(field.user_ask_about_field(index))

  field_question = temp_field_question
---
id: choose field types
continue button field: choose_field_types
question: |
  On-screen prompts
subquestion: |  
  % if len(field_question) > 0:
  1. Look at each field below. It represents a blank space on your template.
  1. If the field is handled as a "basic question", it will not be shown
  below. Instead, we will use a pre-written prompt for it.
  2. Assign each field an on-screen prompt. The prompt is shown to the user
  of your form. We start with the name of the field as a prompt. Edit it so it makes sense.
  2. Double-check the kind of input your field uses, as well as the type
  of data it will hold.
    
  * `yesno` is for true/false checkboxes
  * `text` is a normal text field. `area` is a text field with more room (3 lines by default)
  * `integer` is a whole number, while `number` can have a decimal point. `currency` represents a dollar figure
  * `date` is a standard date picker, which shows a calendar in most browsers.
  % endif
    
fields:
  - code: field_question
  - note: |
      **Built-in questions this form triggers**[BR]
      % if len(built_in_fields_used) > 1:
      These fields are not listed above because a basic-question already handles them: ${ built_in_fields_used }.
      % else:
      This field is not listed above because a basic-question already handles
      it: ${ built_in_fields_used }.
      % endif
    show if:
      code: |
        len(built_in_fields_used)
---
code: |
  questions.there_are_any = len(fields) > 0
---
code: |
  # We keep adding questions until ALL of the fields have been
  # assigned.
  questions.there_is_another = len(questions.all_fields_used()) < len(fields)
---
id: create a draft of screen i
question: |
  Create a draft of the ${ordinal(i)} screen
subquestion: |
  Each screen can define multiple fields at a time. Give this screen
  a title, some context for the screen, and decide which fields are
  shown on this screen.
fields:
  - What should the title of this screen be? : questions[i].question_text
    default: Screen ${nice_number(i+1)}
  - What is the text that appears under the title? : questions[i].subquestion_text
    input type: area
    required: False
  - Select the fields that will appear on this screen: questions[i].field_list
    datatype: object_checkboxes
    # We show all of the fields, but exclude the ones present
    # anywhere in the list of questions we already drafted
    exclude: questions.all_fields_used()
    none of the above: False
    choices: fields
    object labeler: |
      lambda y: "**" + y.variable + "**" + "[BR]" + y.label      
  - Add a "continue button field" on this screen: questions[i].has_mandatory_field
    datatype: noyes
    help: |
      If you are not sure, leave this unchecked.
      You may want to do this if all of the questions on this
      screen will be optional.
    validate: |
      lambda y: True if questions[i].field_list.number()>0 else validation_error("To add this button, you must select at least one field.")
---
code: |
  # This was handled differently in the original wizard Jonathan made. Backfilling this attribute
  questions[i].type = 'question'
---
code: |
  # This was handled differently in the original wizard Jonathan made. Backfilling this attribute
  fields[i].has_label = True
---
code: |
  for question in questions:
    question.type = "question"
    interview.questions.append(question)
  add_questions_to_interview = True
---
need:
  - built_in_people_vars_used
code: |
  objects_block =  interview.questions.appendObject()
  objects_block.type = "objects"
  objects_block.objects = DAList(object_type=DAObject, auto_gather=False)
  for person in people_variables.true_values().union(built_in_people_vars_used):
    new_object = objects_block.objects.appendObject()
    new_object.name = person
    new_object.type = "ALPeopleList"
    if person in people_quantities:
      if people_quantities[person] == 'one':
        new_object.params = [
          ("ask_number", "True", bool), 
          ("target_number", 1, int)
          ]
  objects_block.objects.gathered=True
  add_objects_block = True
---
code: |
  # Build the mandatory code block that will control question flow
  logic_list = []
  logic_list.append('# Intro screen/splash screen')
  logic_list.append('al_intro_screen') # Splash page for your organization
  logic_list.append(interview_label + '_intro')
  logic_list.append('# Set the allowed courts for this interview')
  logic_list.append('allowed_courts = interview_metadata["' + interview_label + '"]["allowed courts"]')
  # The placeholder section label just reviews all of the questions
  logic_list.append("nav.set_section('" + "review_" + interview_label + "')")
  if interview.typical_role == 'unknown':
    logic_list.append("# Below sets the user_role by asking a question.")
    logic_list.append("# You can set user_role directly instead to either 'plaintiff' or 'defendant'")
    logic_list.append("user_ask_role")
  else:
    logic_list.append("user_role = '" + interview.typical_role +"'")
  
  # Figure out how many steps the interview has
  total_num_screens = len(questions.elements) + len(built_in_fields_used)
  
  # We'll have a progress step every 5 screens, 
  # unless it's very short
  if total_num_screens > 20:
    screen_divisor = 5
  else:
    screen_divisor = 3
  
  total_steps = round(total_num_screens / screen_divisor) + 5 # fudge factor: signature screen etc.
  increment = 100/total_steps
  progress = 0
  
  for index, question in enumerate(questions):
    if index and index % screen_divisor == 0:
      progress += increment
      logic_list.append("set_progress(" + str(round(progress,2)) +")")
    if question.type == 'question':
      # TODO(bryce): make OOP: don't refer to question.type
      # Add the first field in every question to our logic tree
      # This can be customized to control the order of questions later      
      if hasattr(question, 'has_mandatory_field') and question.has_mandatory_field:
        logic_list.append(question.field_list[0].docassemble_variable)
      else:
        logic_list.append(varname(question.question_text))

  logic_list.append("# Set the answer file name.")
  logic_list.append("set_parts(subtitle=str(users))")
  
  # Add in the built-in fields to the logic list     
  # Something here should happen to eliminate duplicates before adding
  # to the logic list
  for index, field in enumerate(built_in_fields_used, start=len(questions) + 1):
    if index and index % screen_divisor == 0:
      progress += increment
      logic_list.append("set_progress(" + str(round(progress,2)) +")")    
    logic_list.append(field.trigger_gather)
  
  # Save a snapshot of interview answers. 
  # We only want a few anonymous variables
  logic_list.append("# Save (anonymized) interview statistics.")
  logic_list.append("store_variables_snapshot(data={'zip': users[0].address.zip})")
  
  # TODO: some of the logic in interview_generator.py should
  # probably be moved here, or another module file
  code_block =  interview.questions.appendObject() # 'main code block')
  code_block.type = 'interview order'
  code_block.logic_list = logic_list
  code_block.interview_label = interview_label
  add_logic_tree = True  
---
need:
  - fields
  - built_in_fields_used
  - interview_label
code: |
  review_block = interview.questions.appendObject()
  review_block.type = "review"
  # Add the fields, removing any duplicates by assigning to a dict first
  review_block.field_list = fields + built_in_fields_used + signature_fields
  review_block.question_text = "Review Screen"
  review_block.subquestion_text = "Edit your answers below"
  review_block.id = interview_label + ' review screen'
  review_block.event = "review_" + interview_label
  add_review_screen = True
---
code: |
  # This interview_label field is used throughout the 
  # generated interview to let us store interview-specific
  # metadata
  # We removed random ID, so make sure the file names are unique
  interview_label = (varname(interview.file_name) if varname(interview.file_name) else varname('ending_variable_' + interview.file_name))
---
code: |
  attachment_variable_name = interview_label + '_attachment'
---
id: download your interview
comment: | 
event: show_interview
question: |
  All done: Download your interview
subquestion: |

  ### Please download the generated interview below
  
  Download the YAML file only:  
  [:download: Download YAML](${interview_download.url_for(attachment=True)})
  
  Download the interview as a Docassemble package:  
  [:download: Download Package](${interview_package_download.url_for(attachment=True)})
  
  ### Preview of Docassemble interview file
  
  ${indent_by(interview.source(),4)}
  
---
code: |
  interview_download.initialize(filename = interview.file_name + '.yml')
  interview_download.write(interview.source())
  interview_download.commit()

  folders_and_files = {
    "templates": template_upload,
    "questions": [interview_download],
    "modules":[],
    "static": [],
    "sources": []
  }
  
  create_package_zip(re.sub("\W","",interview.title), interview.package_info(), {"author name and email":"author@example.com"}, folders_and_files, interview_package_download)
  
  wrote_interview = True
---
need:
  - template_upload[0].filename
  - built_in_fields_used
  - fields
  - signature_fields
  - interview.short_title
code: |
  attachment = attachments.appendObject()
  if template_upload[0].extension == 'pdf':
    attachment.pdf_filename = template_upload[0].filename    
    attachment.type = 'pdf'
  else:
    attachment.type = 'docx'
    attachment.docx_filename = template_upload[0].filename
  attachment.fields = built_in_fields_used + fields + signature_fields
  attachment.name = interview.short_title
  attachments.gathered = True
---
need:
  - interview_label
  - attachment_variable_name
code: |
  preview_question = interview.questions.appendObject()
  preview_question.type = 'interstitial'
  preview_question.continue_button_field = interview_label + '_preview_question' 
  preview_question.question_text = 'Review your form before you sign it'  
  preview_question.subquestion_text = "Here is a preview of the form you'll sign on the next page. \n\n ${ al_user_bundle.as_pdf() }\n\n"
  preview_question.subquestion_text += "Remember to come back to this window to continue and sign your form."
  preview_question.is_mandatory = False  

  created_preview_question = True
---
need:
  - attachments
  - attachment_variable_name
  - interview
  - interview_label
code: |
  # This is the question that goes with the regular attachment
  end_question = interview.questions.appendObject() # 'all_done')
  end_question.id = "download" # Use a consistent ID for Google Analytics
  end_question.type = 'question'
  end_question.progress = "100"
  end_question.question_text = 'Your form is ready to download.'

  # Add a preview of the form to the draft ending screen
  end_question.subquestion_text = 'Thank you ${users}. Your form is ready to download and deliver.\n\n'
  end_question.subquestion_text += 'Below is a preview of your form.\n\n'
  end_question.subquestion_text += "${ al_user_bundle.download_list_html() }"
  # TODO: make the logic block mandatory, instead of the download screen
  end_question.is_mandatory = True # Keep this in so you can run the interview right away
  end_question.attachment_variable_name = attachment_variable_name
  end_question.interview = interview
  end_question.interview_label = interview_label

  # This only gets the one regular PDF attachment
  end_question.attachments = attachments
  end_question.field_list.auto_gather = False
  item = end_question.field_list.appendObject()
  item.field_type = 'end_attachment'
  item.variable = 'all_done'
  # item.question = end_question
  end_question.field_list.gathered = True  
  
  created_attachment = True
---
#######################################
# Code to support github feedback form
imports:
  - importlib
---
code: |
  try:
    package_version_number = str(importlib.import_module(user_info().package).__version__)
  except:
    package_version_number = "playground"
---
code: |
  # Leaving this in but in this package, it will
  # always be docassemble-assemblylinewizard, unless an org
  # forks this for their own jurisdiction
  package_name = str(user_info().package)
  if package_name and not "playground" in package_name:
    github_repo_name = package_name.replace('.','-')
  else:    
    github_repo_name = "docassemble-assemblylinewizard"
---
default screen parts:
  # May want to change the interview URL if you customize/fork
  under: |
    Feedback, suggestions, or comments? [Complete this survey](${ interview_url(i="docassemble.assemblylinewizard:feedback.yml", github_repo=github_repo_name, github_user='suffolklitlab', variable=user_info().variable, question_id=user_info().question_id, package_version=package_version_number, local=False,reset=1) } ){:target="_blank"}.
