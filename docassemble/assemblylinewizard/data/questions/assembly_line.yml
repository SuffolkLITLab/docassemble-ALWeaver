metadata:
  title: Document assembly wizard
  short title: Wizard
---
modules:
  - docassemble.base.util
  - docassemble.base.logger
  - .interview_generator
---
objects:
  - interview: DAInterview
  - main_code: DAQuestion
  - metadata: DAQuestion
  - modules: DAQuestion
  - attachments: DAAttachmentList
  - fields: DAFieldList
  - signature_fields: DAFieldList
  - questions: DAQuestionList.using(complete_attribute='question_text')
---
variable name: built_in_variables
data:
  - user_name_first
  - user_name_middle
  - user_name_last
  - user_name_suffix
  - user_name_full 
  - user_gender 
  - user_gender_male 
  - user_gender_female 
  - user_gender_other 
  - user_birthdate
  - user_age
  - witness_name_full
  - user_address_street
  - user_address_street2
  - user_address_city
  - user_address_state
  - user_address_zip
  - user_address_on_one_line 
  - user_address_city_state_zip 
  - user_address_block 
  - user_email
  - user_phone
  - user2_name_first
  - user2_name_middle
  - user2_name_last
  - user2_name_suffix
  - user2_name_full 
  - user2_gender 
  - user2_gender_male 
  - user2_gender_female 
  - user2_gender_other 
  - user2_birthdate
  - user2_age
  - user2_address_street
  - user2_address_street2
  - user2_address_city
  - user2_address_state
  - user2_address_zip
  - user2_address_on_one_line 
  - user2_address_city_state_zip 
  - user2_address_block 
  - user2_email
  - user2_phone
  - child1_name_first
  - child1_name_middle
  - child1_name_last
  - child1_name_suffix
  - child1_name_full 
  - child1_gender 
  - child1_gender_male 
  - child1_gender_female 
  - child1_gender_other 
  - child1_birthdate
  - child1_age
  - other_party_name_first
  - other_party_name_middle
  - other_party_name_last
  - other_party_name_suffix
  - other_party_name_full 
  - other_party_gender 
  - other_party_gender_male 
  - other_party_gender_female 
  - other_party_gender_other 
  - other_party_birthdate
  - other_party_age
  - other_party_address_street
  - other_party_address_street2
  - other_party_address_city
  - other_party_address_state
  - other_party_address_zip
  - other_party_address_on_one_line 
  - other_party_address_city_state_zip 
  - other_party_address_block 
  - other_party_email
  - other_party_phone
---
variable name: endings
data:
  - name_first
  - name_middle
  - name_last
  - name_suffix
  - name_full 
  - gender 
  - gender_male 
  - gender_female 
  - gender_other 
  - birthdate
  - age
  - address_street
  - address_street2
  - address_city
  - address_state
  - address_zip
  - address_on_one_line 
  - address_city_state_zip 
  - address_block 
  - email
  - phone
---
mandatory: True
id: Interview Order
code: |
  template_upload
  fields.gathered
  interview.title
  # debug
  choose_field_types
  questions.gather()
  #debug_questions  
  set_metadata
  add_questions_to_interview
  # get_vars
  # created_package
  show_interview
---
question: |
  Please upload a PDF template
fields:
  - File: template_upload
    datatype: file
---
question: |
  Information about this interview
subquestion: |
  Put in draft information about this form below.
  
  Use plain language that will be understandable to someone who
  uses this form without a lawyer. Remember, we can change it later.
fields:
  - Title: interview.title
    default: ${template_upload[0].filename[:-4].replace('_',' ').capitalize()}
  - Short name: interview.short_title
    default: ${template_upload[0].filename[:-4].replace('_',' ').capitalize()}
  - Description: interview.description
    datatype: area
    default: ${template_upload[0].filename[:-4].replace('_',' ').capitalize()}
  - Interview file name: interview.file_name
    default: ${template_upload[0].filename[:-4]}
  - Link to original form: interview.original_form
    hint: http://masslegalhelp.org/my_form
help: |
  `${all_fields}`
  
  ${fields}
---
comment: |
  Get the list of fields
code: |
  all_fields = template_upload.get_pdf_fields()
  the_fields = [field[0] for field in all_fields]
  fields.auto_gather = False
  signature_fields.auto_gather = False
  for field in all_fields:
    # Skip the built-in variable names that we'll have pre-written questions for
    if field[0] in built_in_variables:
      continue
    if field[0].startswith('user') or field[0].startswith('child'):
      skip = False
      for ending in endings:
        if field[0].endswith(ending):
          skip = True
      if skip:
        continue

    # Check if it's a signature field. If so, we need a signature question
    # We'll handle those in a later version of this interview
    # For this special interview, we only expect 3 possible fields that we'll
    # provide in advance.
    if field[4] == '/Sig':
      new_field = signature_fields.appendObject()
    else:
      new_field = fields.appendObject()
      
    new_field.variable = field[0]
    new_field.has_label = True

    # Let's guess the type of each field from the name / info from PDF
    variable_name_guess = new_field.variable.replace('_',' ').capitalize()
    if new_field.variable.endswith('_date'):
      new_field.field_type_guess = 'text'
      new_field.field_data_type_guess = 'date'
      new_field.variable_name_guess = 'Date of ' + new_field.variable[:-5].replace('_',' ')
    elif new_field.variable.endswith('_yes') or new_field.variable.endswith('_no'):
      new_field.field_type_guess = 'yesno'
      new_field.field_data_type_guess = None
      new_field.variable_name_guess = new_field.variable[:-3].replace('_',' ').capitalize() if new_field.variable.endswith('_no') else new_field.variable[:-4].replace('_',' ').capitalize()
    elif field[4] == '/Btn':
      new_field.field_type_guess = 'yesno'
      new_field.field_data_type_guess = None
      new_field.variable_name_guess = variable_name_guess
    elif field[4] == '/Sig':
      new_field.field_type_guess = 'signature'
      new_field.variable_name_guess = variable_name_guess
    else:
      new_field.field_type_guess = 'text'
      new_field.field_data_type_guess = 'text'
      new_field.variable_name_guess = variable_name_guess
  signature_fields.gathered = True
  fields.gathered = True
---
field: debug
question: |
  Debug
subquestion: |
  `${all_fields}`
  
  ${fields}
---
field: debug_questions
question: |
  Question status
subquestion: |
  ### A heading
  % for question in questions:
  
  ${indent_by(question.source(),4)}
  
  % endfor
---
code: |
  metadata.type = 'metadata'
  metadata.interview = interview
  metadata.file_name = interview.file_name
  metadata.title = interview.title
  metadata.short_title = interview.short_title
  metadata.description = interview.description
  metadata.original_form = interview.original_form
  interview.blocks.append(metadata)
  set_metadata = True
---
code: |
  # Build the code representing the details of each field
  
  field_types = ['yesno','text','area']  
  field_data_types = ['text','integer','number','currency','date','email']

  temp_field_question = []
  for index, field in enumerate(fields):      
    temp_field_question.append({
      'note': '**' + field.variable + '**'
    })
    temp_field_question.append({
      'label': "What should the label be for `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].label',
      'default': field.variable_name_guess
    })
    temp_field_question.append({
      'label': "What type of input is `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].field_type',
      'choices': field_types,
      'default': field.field_type_guess
    })
    temp_field_question.append({
      'label': "What datatype is `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].field_data_type',
      'choices': field_data_types,
      'default': field.field_data_type_guess,
      'hide if': {'variable': 'fields[' + str(index) + '].field_type', 'is': 'yesno'}
    })

  field_question = temp_field_question
---
continue button field: choose_field_types
question: |
  Label the fields
subquestion: |
  Below is a list of the field names in this PDF.
  
  We left out the fields that are included in our basic interview already.
  
  For each field, please enter in a descriptive label (this shows to the user),
  as well as selecting the type of information the field will hold.
  
  * `yesno` is a checkbox
  * `text` is a normal text field. `area` is a text field with more room (3 lines by default)
  * `integer` is a whole number, while `number` can have a decimal point. `currency` represents a dollar figure
  
  We have tried to guess the type of field from the name of the variable.
fields:
  - code: field_question
---
code: |
  fields_still_unassigned = fields
---
code: |
  questions.there_are_any = True
---
code: |
  questions.there_is_another = len(fields_still_unassigned) > 0
---
question: |
  Create a draft of the ${ordinal(i)} question
subquestion: |
  Remember, this is a draft you can edit later. It does not need to be perfect.
  You can accept the default if you're not sure yet.
fields:
  - What should the title of this question be? : questions[i].question_text
    default: Screen ${nice_number(i+1)}
  - What is the text that appears under the title? : questions[i].subquestion_text
    default: Placeholder text
    input type: area
  - Select the fields that will appear on this screen: questions[i].field_list
    datatype: object_checkboxes 
    choices: fields_still_unassigned
    object labeler: |
      lambda y: y.variable + ' (' + y.label + ')'
validation code: |
  for field in questions[i].field_list:
    fields_still_unassigned.remove(field)
---
code: |
  questions[i].type = 'question'
---
code: |
  fields[i].has_label = True
---
code: |
  for question in questions:
    interview.questions[question.question_text] = question
  add_questions_to_interview = True
---
event: show_interview
question: |
  Interview contents
subquestion: |
  ${indent_by(interview.source(),4)}