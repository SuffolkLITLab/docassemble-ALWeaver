metadata:
  title: Document assembly wizard
  short title: Wizard
---
features:
  question help button: True
  labels above fields: True
---
modules:
  - docassemble.base.util
  - docassemble.base.logger
  - .interview_generator  
---
objects:
  - generator_data: DAStore.using(base='interview', encrypted=False) # store sequential use of this generator
  - interview: DAInterview
  - main_code: DAQuestion
  - metadata: DAQuestion
  - modules: DAQuestion
  - attachments: DAAttachmentList
  - preview_attachments: DAAttachmentList
  - built_in_fields_used: DAFieldList.using(gathered=True)
  - fields: DAFieldList.using(gathered=True)
  - signature_fields: DAFieldList.using(gathered=True)
  - questions: DAQuestionList.using(complete_attribute='question_text')
  - interview_download: DAFile
---
code: |
  # we use this to ensure that each interview gets a unique key
  sequence = generator_data.get('sequence') or 0
---
code: |
  generator_data.set('sequence',sequence+1)
  increment_sequence = True
---
comment: |
  This is a list of some variables we leave alone (don't transform)
  but still represent something we're handling in basic-question.yml
  No need to prompt the user to group these questions.
variable name: variables_to_skip
data:
  - signature_date
  - plaintiff
  - plaintiffs
  - defendant
  - defendants
  - petitioner
  - petitioners
  - witnesses
  - users
  - other_parties
  - children
---
mandatory: True
id: Interview Order
code: |
  template_upload
  get_fields
  interview.title
  interview.typical_role  
  set_metadata
  add_draft_intro_screen
  add_includes  
  # debug
  choose_field_types
  questions.gather()
  #debug_questions  
  add_logic_tree    
  add_questions_to_interview
  # get_vars
  # created_package
  created_attachment
  created_preview_attachment
  wrote_interview
  increment_sequence
  show_interview
---
question: |
  Please upload a PDF template
  
fields:
  - File: template_upload
    datatype: file
help: |
  This interview has been run ${sequence} times.
---
code: |
  short_filename_with_spaces = template_upload[0].filename[:-4].replace('_',' ').capitalize()
---
question: |
  Information about this interview
subquestion: |
  Put in draft information about this form below.
  
  Use plain language that will be understandable to someone who
  uses this form without a lawyer. Remember, we can change it later.
  
  % if len(all_fields) != len(fields) + len(signature_fields) + len(built_in_fields_used):
  ** There may be a problem with this file. Check for the wrong number
  of fields**
  % endif
fields:
  - Title: interview.title
    default: ${short_filename_with_spaces}
  - Short name: interview.short_title
    default: ${short_filename_with_spaces}
  - Description: interview.description
    datatype: area
    default: ${short_filename_with_spaces}
  - Allowed courts: interview.allowed_courts
    datatype: checkboxes
    choices:
      - Boston Municipal Court
      - District Court
      - Superior Court
      - Housing Court
      - Probate and Family Court
      - Juvenile Court
      - Land Court
  - Preferred court: interview.preferred_court
    choices:
      - Boston Municipal Court
      - District Court
      - Superior Court
      - Housing Court
      - Probate and Family Court
      - Juvenile Court
      - Land Court
      - Any court (no preferred court)
  - Categories: interview.categories
    datatype: checkboxes
    choices:
      - Housing
      - Family Law
      - Domestic Violence / Safety of self
      - Health and Mental Health
      - Guardianship
      - Consumer and Debt
      - Employment / Unemployment
      - Immigration
      - Income and benefits
      - Education
      - Rights of incarcerated/formerly incarcerated
      - Other
  - Other categories (separate with a comma): interview.other_categories
    datatype: area
    rows: 2
    show if: interview.categories['Other']
  - Unique label for this interview: interview.file_name
    default: ${template_upload[0].filename[:-4]}
    help: |
      This label should be unique across all interviews. It will be
      used to name the file as well as an internal label for the Docassemble
      coder.
      
      It won't be shown to the end user.
  - Link to original form: interview.original_form
    hint: http://masslegalhelp.org/my_form
help: |
  ${len(all_fields)}
  
  `${all_fields}`
  
  * ${len(fields)} Fields we'll ask about
  * ${len(built_in_fields_used)} built-in fields
  * ${len(signature_fields)} signature fields
  
  ${fields}
---
question: |
  Interview roles
subquestion: |  
  For this ${interview.title} form, is the user of the form typically the 
  Plaintiff/Petitioner or the Defendant/Respondent?

  The Plaintiff/Petitioner starts a case. The Defendant/Respondent
  is responding to a case someone else started.
fields:
  - no label: interview.typical_role
    input type: radio
    choices:
      - Plaintiff/Petitioner: plaintiff
      - Defendant/Respondent: defendant
      - Could be either: unknown
help: |
  For example, if you are starting a new case, you are always the plaintiff
  or petitioner. 
  
  If you are a tenant responding to an eviction case, you are usually the
  Defendant.
  
  If you are responding to an existing case that is not an eviction, you
  might be the defendant, but in some cases you could be the plaintiff.
  
  If you are not sure: please review the form and talk to a subject matter 
  expert. We can always fix this later.
---
comment: |
  Get the list of fields
code: |
  all_fields = template_upload.get_pdf_fields()
---
comment: |
  Convert the PDF fields into Docassemble fields
code: |
  # These all must be defined in advance to avoid duplicates
  all_fields
  variables_to_skip
  fields
  signature_fields
  built_in_fields_used  
  
  # Probably all of this should move into a class
  for pdf_field_tuple in all_fields:
    pdf_field_name = pdf_field_tuple[0]
    # Check to see if we this is a built-in field (a
    # field handled in basic-questions.yml),
    # a signature field, or an arbitrary field.
    is_reserved_name = is_reserved_label(pdf_field_name)
    if is_reserved_name or pdf_field_name in variables_to_skip:
      new_field = built_in_fields_used.appendObject()
    elif pdf_field_tuple[4] == '/Sig':
      new_field = signature_fields.appendObject()
    else:
      new_field = fields.appendObject()
    
    # This function determines what type of variable
    # we're dealing with
    fill_in_field_attributes(new_field, pdf_field_tuple)    
    
  get_fields = True
---
code: |
  interview.field_list = fields
---
code: |
  # Build the list of includes
  include_question = interview.questions.initializeObject('includes')
  include_question.type = 'includes'
  include_question.includes = ['docassemble.MAVirtualCourt:basic-questions.yml']
  add_includes = True
---
code: |
  # Create an introduction question
  intro_question = interview.questions.initializeObject('intro')
  intro_question.type = 'interstitial'
  intro_question.comment = "This question is used to introduce your interview. Please customize"
  intro_question.continue_button_field = interview_label + '_intro'
  intro_question.question_text = interview.title
  intro_question.subquestion_text = interview.description
  add_draft_intro_screen = True
---
code: |
  # Build the dictionary of info we want the interview
  # to know about itself.
  metadata.type = 'metadata_code'
  metadata.interview_label = interview_label
  metadata.interview = interview
  metadata.file_name = interview.file_name
  metadata.title = interview.title
  metadata.short_title = interview.short_title
  metadata.description = interview.description
  metadata.original_form = interview.original_form
  metadata.allowed_courts = interview.allowed_courts
  metadata.preferred_court = interview.preferred_court
  metadata.categories = interview.categories
  metadata.other_categories = interview.other_categories if defined('interview.other_categories') else None
  metadata.typical_role = interview.typical_role
  metadata.built_in_fields_used = built_in_fields_used
  metadata.fields = fields
  interview.blocks.append(metadata)
  set_metadata = True
---
code: |
  # Create code for the question that we use to label
  # each field.
  
  field_types = ['yesno','text','area']  
  field_data_types = ['text','integer','number','currency','date','email']

  temp_field_question = []
  for index, field in enumerate(fields.elements):    
    if field.variable != field.transformed_variable:
      temp_field_question.append({
        'note': '**' + field.variable + ' (will be renamed to ' + field.transformed_variable + ')**'})
    else:
      temp_field_question.append({
        'note': '**' + field.variable + '**'
      })
    temp_field_question.append({
      'label': "What should the label be for `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].label',
      'default': field.variable_name_guess
    })
    temp_field_question.append({
      'label': "What type of input is `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].field_type',
      'choices': field_types,
      'default': field.field_type_guess if hasattr(field, 'field_type_guess') else None
    })
    temp_field_question.append({
      'label': "What datatype is `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].field_data_type',
      'choices': field_data_types,
      'default': field.field_data_type_guess if hasattr(field, 'field_data_type_guess') else None,
      'hide if': {'variable': 'fields[' + str(index) + '].field_type', 'is': 'yesno'}
    })

  field_question = temp_field_question
---
continue button field: choose_field_types
question: |
  Label the fields
subquestion: |
  Below is a list of the field names in this PDF.
  
  We left out the fields that are included in our basic interview already.
  
  For each field, please enter in a descriptive label (this shows to the user),
  as well as selecting the type of information the field will hold.
  
  * `yesno` is a checkbox
  * `text` is a normal text field. `area` is a text field with more room (3 lines by default)
  * `integer` is a whole number, while `number` can have a decimal point. `currency` represents a dollar figure
  
  We have tried to guess the type of field from the name of the variable.
fields:
  - code: field_question
---
code: |
  questions.there_are_any = True
---
code: |
  # We keep adding questions until ALL of the fields have been
  # assigned.
  questions.there_is_another = len(questions.all_fields_used()) < len(fields)
---
question: |
  Create a draft of the ${ordinal(i)} question
subquestion: |
  Remember, this is a draft you can edit later. It does not need to be perfect.
  You can accept the default if you're not sure yet.
fields:
  - What should the title of this question be? : questions[i].question_text
    default: Screen ${nice_number(i+1)}
  - What is the text that appears under the title? : questions[i].subquestion_text
    default: Placeholder text
    input type: area
  - Is at least one question on this screen required?: questions[i].has_mandatory_field
    datatype: yesnoradio
    default: True
    help: |
      Select "No" only if all of the fields will be optional. For example,
      you might ask an optional "Tell us more" question that the user
      can leave empty if they don't have anything to say for that question.
  - Select the fields that will appear on this screen: questions[i].field_list
    datatype: object_checkboxes
    # We show all of the fields, but exclude the ones present
    # anywhere in the list of questions we already drafted
    exclude: questions.all_fields_used()
    choices: fields
    object labeler: |
      lambda y: y.variable + ' (' + y.label + ')'
---
code: |
  # This was handled differently in the original wizard Jonathan made. Backfilling this attribute
  questions[i].type = 'question'
---
code: |
  # This was handled differently in the original wizard Jonathan made. Backfilling this attribute
  fields[i].has_label = True
---
code: |
  for question in questions:
    interview.questions[question.question_text] = question
    question.type = "question"
  # add_variable_list # We moved this into the metadata block
  add_questions_to_interview = True
---
code: |
  # Build the mandatory code block that will control question flow
  logic_list = []
  logic_list.append('# Set the preferred/allowed courts for this interview')
  logic_list.append('preferred_court = interview_metadata["' + interview_label + '"]["preferred court"]')
  logic_list.append('allowed_courts = interview_metadata["' + interview_label + '"]["allowed courts"]')
  for question in questions:
    if question.type == 'question':
      # Add the first field in every question to our logic tree
      # This can be customized to control the order of questions later      
      if hasattr(question, 'has_mandatory_field') and question.has_mandatory_field:
        logic_list.append(varname(question.field_list[0].variable))
      else:
        logic_list.append(varname(question.question_text))              
  for field in built_in_fields_used:
    logic_list.append(map_names(field.variable))
  # TODO: some of the logic in interview_generator.py should
  # probably be moved here, or another module file
  interview.questions.initializeObject('main code block')
  interview.questions['main code block'].type = 'interview order'
  interview.questions['main code block'].logic_list = logic_list
  interview.questions['main code block'].interview_label = interview_label
  add_logic_tree = True  
---
code: |
  # This interview_label field is used throughout the 
  # generated interview to let us store interview-specific
  # metadata
  interview_label = (varname(interview.file_name) if varname(interview.file_name) else varname('ending_variable_' + interview.file_name)) + str(sequence).zfill(4)
---
code: |
  attachment_variable_name = interview_label + '_attachment'
---
comment: | 
event: show_interview
question: |
  All done
subquestion: |

  ### Please download the generated interview below
  
  [:download: Download](${interview_download.url_for(attachment=True)})
  
  ### Preview of Docassemble interview file
  
  ${indent_by(interview.source(),4)}
  
---
code: |
  interview_download.initialize(filename = metadata.file_name + '.yml')
  interview_download.write(interview.source())
  interview_download.commit()
  wrote_interview = True
---
code: |
  attachment = attachments.appendObject()
  attachment.type = 'pdf'
  attachment.pdf_filename = template_upload[0].filename
  attachment.fields = built_in_fields_used + fields + signature_fields
  attachment.name = metadata.short_title
  attachments.gathered = True
---
code: |
  # We're making a preview version of the PDF attachment
  preview_attachment = preview_attachments.appendObject()
  preview_attachment.type = 'pdf'
  preview_attachment.pdf_filename = template_upload[0].filename
  all_gathered_fields = built_in_fields_used + fields + signature_fields
  preview_attachment.fields = [field for field in all_gathered_fields if not field.field_type_guess == 'signature']
  preview_attachment.name = metadata.short_title
  preview_attachments.gathered = True
  created_preview_attachment = True
---
code: |
  # This is the question that goes with the preview attachment
  preview_form = interview.questions.initializeObject('preview_form')
  preview_form.type = 'question'
  preview_form.question_text = 'Placeholder preview screen'
  preview_form.subquestion_text = "Here is a preview of the form you'll sign on the next page. \n\n ${" + attachment_variable_name + "_preview}"
  preview_form.is_mandatory = False
  preview_form.continue_button_field = interview_label + '_preview_question'
  # We added this feature -- a variable to reference the attachment with
  preview_form.attachment_variable_name = attachment_variable_name + '_preview'
  preview_form.interview = interview
  # preview_form.interview_label = None # skip this for the preview
  preview_form.attachments = preview_attachments
  preview_form.field_list.appendObject()
  preview_form.field_list[0].field_type = 'end_attachment'
  preview_form.field_list[0].variable = 'preview'
  preview_form.field_list[0].question = preview_form
  preview_form.field_list.gathered = True

  # This is the question that goes with the regular attachment
  end_question = interview.questions.initializeObject('all_done')
  end_question.type = 'question'
  end_question.progress = "100"
  end_question.question_text = 'Placeholder download screen'
  # Add a preview of the form to the draft ending screen
  end_question.subquestion_text = 'Placeholder\n\n'
  end_question.subquestion_text += '### Next steps\n\n'
  end_question.subquestion_text += '1. Step 1\n'
  end_question.subquestion_text += '1. Step 2\n\n'
  end_question.subquestion_text += 'Below is a preview of your form.\n\n'
  end_question.subquestion_text += '${' + attachment_variable_name +' }'
  end_question.is_mandatory = True # Keep this in so you can run the interview right away
  # We added this feature -- a variable to reference the attachment with
  end_question.attachment_variable_name = attachment_variable_name
  end_question.interview = interview
  end_question.interview_label = interview_label
  # This only gets the one regular PDF attachment
  end_question.attachments = attachments
  end_question.field_list.appendObject()
  end_question.field_list[0].field_type = 'end_attachment'
  end_question.field_list[0].variable = 'all_done'
  end_question.field_list[0].question = end_question
  end_question.field_list.gathered = True
  
  created_attachment = True