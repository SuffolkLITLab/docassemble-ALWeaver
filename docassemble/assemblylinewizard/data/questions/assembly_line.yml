metadata:
  title: Document assembly wizard
  short title: Wizard
---
modules:
  - docassemble.base.util
  - docassemble.base.logger
  - .interview_generator
---
objects:
  - interview: DAInterview
  - main_code: DAQuestion
  - metadata: DAQuestion
  - modules: DAQuestion
  - attachments: DAAttachmentList
  - built_in_fields_used: DAFieldList
  - fields: DAFieldList
  - signature_fields: DAFieldList
  - questions: DAQuestionList.using(complete_attribute='question_text')
  - interview_download: DAFile
---
variable name: variables_to_skip
data:
  - signature_date
  - plaintiff
  - plaintiffs
  - defendant
  - defendants
  - petitioner
  - petitioners
  - witnesses
  - users
  - other_parties
  - children
---
mandatory: True
id: Interview Order
code: |
  template_upload
  fields.gathered
  interview.title
  set_metadata  
  add_includes  
  # debug
  choose_field_types
  questions.gather()
  #debug_questions  
  add_logic_tree    
  add_questions_to_interview
  # get_vars
  # created_package
  created_attachment  
  wrote_interview
  show_interview
---
question: |
  Please upload a PDF template
fields:
  - File: template_upload
    datatype: file
---
code: |
  short_filename_with_spaces = template_upload[0].filename[:-4].replace('_',' ').capitalize()
---
question: |
  Information about this interview
subquestion: |
  Put in draft information about this form below.
  
  Use plain language that will be understandable to someone who
  uses this form without a lawyer. Remember, we can change it later.
fields:
  - Title: interview.title
    default: ${short_filename_with_spaces}
  - Short name: interview.short_title
    default: ${short_filename_with_spaces}
  - Description: interview.description
    datatype: area
    default: ${short_filename_with_spaces}
  - Allowed courts: interview.allowed_courts
    datatype: checkboxes
    choices:
      - Boston Municipal Court
      - District Court
      - Superior Court
      - Housing Court
      - Probate and Family Court
      - Juvenile Court
      - Land Court
  - Preferred court: interview.preferred_court
    choices:
      - Boston Municipal Court
      - District Court
      - Superior Court
      - Housing Court
      - Probate and Family Court
      - Juvenile Court
      - Land Court
      - Any court (no preferred court)
  - Categories: interview.categories
    datatype: checkboxes
    choices:
      - Housing
      - Family Law
      - Domestic Violence / Safety of self
      - Health and Mental Health
      - Guardianship
      - Consumer and Debt
      - Employment / Unemployment
      - Immigration
      - Income and benefits
      - Education
      - Rights of incarcerated/formerly incarcerated
      - Other
  - Other categories (separate with a comma): interview.other_categories
    datatype: area
    rows: 2
    show if: interview.categories['Other']
  - Interview file name: interview.file_name
    default: ${template_upload[0].filename[:-4]}
  - Link to original form: interview.original_form
    hint: http://masslegalhelp.org/my_form
help: |
  `${all_fields}`
  
  ${fields}
---
comment: |
  Get the list of fields
code: |
  all_fields = template_upload.get_pdf_fields()
  the_fields = [field[0] for field in all_fields]
  fields.auto_gather = False
  signature_fields.auto_gather = False
  # Determine the correct list to put this field in
  
  fields_processed = set()
  
  for field in all_fields:
    # Skip the built-in variable names that we'll have pre-written questions for
    if field[0] in fields_processed:
      continue # Go to the next run of the loop if we already did this variable
    
    # map_names checks if its a field we're handling by renaming from the PDF
    if map_names(field[0]) != field[0] or field[0] in variables_to_skip:
      new_field = built_in_fields_used.appendObject()
    #elif field[0].startswith('user') or field[0].startswith('child'):
    #  skip = False
    #  for ending in endings:
    #    if field[0].endswith(ending):
    #      skip = True
    #  if skip:
    #    new_field = built_in_fields_used.appendObject()
    #  else:
    #    new_field = fields.appendObject()
    # Check if it's a signature field. If so, we need a signature question
    # We'll handle those in a later version of this interview
    # For this special interview, we only expect 3 possible fields that we'll
    # provide in advance.
    elif field[4] == '/Sig':
      new_field = signature_fields.appendObject()
    else:
      new_field = fields.appendObject()
      
    new_field.variable = varname(field[0])
    new_field.has_label = True

    # Let's guess the type of each field from the name / info from PDF
    variable_name_guess = new_field.variable.replace('_',' ').capitalize()
    if new_field.variable.endswith('_date'):
      new_field.field_type_guess = 'text'
      new_field.field_data_type_guess = 'date'
      new_field.variable_name_guess = 'Date of ' + new_field.variable[:-5].replace('_',' ')
    elif new_field.variable.endswith('_yes') or new_field.variable.endswith('_no'):
      new_field.field_type_guess = 'yesno'
      new_field.field_data_type_guess = None
      new_field.variable_name_guess = new_field.variable[:-3].replace('_',' ').capitalize() if new_field.variable.endswith('_no') else new_field.variable[:-4].replace('_',' ').capitalize()
    elif field[4] == '/Btn':
      new_field.field_type_guess = 'yesno'
      new_field.field_data_type_guess = None
      new_field.variable_name_guess = variable_name_guess
    elif field[4] == '/Sig':
      new_field.field_type_guess = 'signature'
      new_field.variable_name_guess = variable_name_guess
    else:
      new_field.field_type_guess = 'text'
      new_field.field_data_type_guess = 'text'
      new_field.variable_name_guess = variable_name_guess
    fields_processed.add(field[0])
  built_in_fields_used.gathered = True
  signature_fields.gathered = True
  fields.gathered = True
---
code: |
  interview.field_list = fields
---
code: |
  include_question = interview.questions.initializeObject('includes')
  include_question.type = 'includes'
  include_question.includes = ['basic-questions.yml']
  add_includes = True
---
field: debug
question: |
  Debug
subquestion: |
  `${all_fields}`
  
  ${fields}
---
field: debug_questions
question: |
  Question status
subquestion: |
  ### A heading
  % for question in questions:
  
  ${indent_by(question.source(),4)}
  
  % endfor
---
code: |
  metadata.type = 'metadata_code'
  metadata.interview_label = interview_label
  metadata.interview = interview
  metadata.file_name = interview.file_name
  metadata.title = interview.title
  metadata.short_title = interview.short_title
  metadata.description = interview.description
  metadata.original_form = interview.original_form
  metadata.allowed_courts = interview.allowed_courts
  metadata.preferred_court = interview.preferred_court
  metadata.categories = interview.categories
  metadata.other_categories = interview.other_categories if defined('interview.other_categories') else None
  interview.blocks.append(metadata)
  set_metadata = True
---
code: |
  # Build the code representing the details of each field
  
  field_types = ['yesno','text','area']  
  field_data_types = ['text','integer','number','currency','date','email']

  temp_field_question = []
  for index, field in enumerate(fields):      
    temp_field_question.append({
      'note': '**' + field.variable + '**'
    })
    temp_field_question.append({
      'label': "What should the label be for `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].label',
      'default': field.variable_name_guess
    })
    temp_field_question.append({
      'label': "What type of input is `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].field_type',
      'choices': field_types,
      'default': field.field_type_guess
    })
    temp_field_question.append({
      'label': "What datatype is `" + field.variable + "`?",
      'field': 'fields[' + str(index) + '].field_data_type',
      'choices': field_data_types,
      'default': field.field_data_type_guess,
      'hide if': {'variable': 'fields[' + str(index) + '].field_type', 'is': 'yesno'}
    })

  field_question = temp_field_question
---
continue button field: choose_field_types
question: |
  Label the fields
subquestion: |
  Below is a list of the field names in this PDF.
  
  We left out the fields that are included in our basic interview already.
  
  For each field, please enter in a descriptive label (this shows to the user),
  as well as selecting the type of information the field will hold.
  
  * `yesno` is a checkbox
  * `text` is a normal text field. `area` is a text field with more room (3 lines by default)
  * `integer` is a whole number, while `number` can have a decimal point. `currency` represents a dollar figure
  
  We have tried to guess the type of field from the name of the variable.
fields:
  - code: field_question
---
code: |
  import copy
  
  fields_still_unassigned = [field for field in fields]
---
code: |
  questions.there_are_any = True
---
code: |
  questions.there_is_another = len(fields_still_unassigned) > 0
---
question: |
  Create a draft of the ${ordinal(i)} question
subquestion: |
  Remember, this is a draft you can edit later. It does not need to be perfect.
  You can accept the default if you're not sure yet.
fields:
  - What should the title of this question be? : questions[i].question_text
    default: Screen ${nice_number(i+1)}
  - What is the text that appears under the title? : questions[i].subquestion_text
    default: Placeholder text
    input type: area
  - Is at least one question on this screen required?: questions[i].has_mandatory_field
    datatype: yesnoradio
    default: True
    help: |
      Select "No" only if all of the fields will be optional. For example,
      you might ask an optional "Tell us more" question that the user
      can leave empty if they don't have anything to say for that question.
  - Select the fields that will appear on this screen: questions[i].field_list
    datatype: object_checkboxes 
    choices: fields_still_unassigned
    object labeler: |
      lambda y: y.variable + ' (' + y.label + ')'
validation code: |
  for field in questions[i].field_list:
    fields_still_unassigned.remove(field)
---
code: |
  questions[i].type = 'question'
---
code: |
  fields[i].has_label = True
---
code: |
  interview.questions.initializeObject('field_list',DAQuestion)
  interview.questions['field_list'].type = 'variables'
  interview.questions['field_list'].field_list = interview.field_list + signature_fields
  interview.questions.initializeObject('built_in_fields_used', DAQuestion)
  interview.questions['built_in_fields_used'].type = "variables"
  interview.questions['built_in_fields_used'].field_list = built_in_fields_used
  add_variable_list = True
---
code: |
  for question in questions:
    interview.questions[question.question_text] = question
    question.type = "question"
  add_variable_list
  add_questions_to_interview = True
---
code: |
  # Build the mandatory code block that will control question flow
  logic_list = []
  for question in questions:
    if question.type == 'question':
      # Add the first field in every question to our logic tree
      # This can be customized to control the order of questions later      
      if hasattr(question, 'has_mandatory_field') and question.has_mandatory_field:
        logic_list.append(varname(question.field_list[0].variable))
      else:
        logic_list.append(varname(question.question_text))
  interview.questions.initializeObject('main code block')
  interview.questions['main code block'].type = 'interview order'
  interview.questions['main code block'].logic_list = logic_list
  interview.questions['main code block'].ending_variable = interview_label
  add_logic_tree = True  
---
code: |
  interview_label = varname(interview.file_name) if varname(interview.file_name) else varname('ending_variable_' + interview.file_name)
---
event: show_interview
question: |
  Interview contents
subquestion: |
  [:download: Download](${interview_download.url_for()})

  ${indent_by(interview.source(),4)}
  
---
code: |
  interview_download.initialize(filename = metadata.file_name + '.yml')
  interview_download.write(interview.source())
  wrote_interview = True
---
code: |
  attachment = attachments.appendObject()
  attachment.type = 'pdf'
  attachment.pdf_filename = template_upload[0].filename
  # attachment.fields = [field.variable for field in built_in_fields_used + fields + signature_fields]
  # attachment.fields = all_fields # the raw info from the PDF TODO: improve
  attachment.fields = built_in_fields_used + fields + signature_fields
  attachment.name = metadata.short_title
  attachments.gathered = True
---
code: |
  attachment_variable_name = interview_label + '_attachment'
---
code: |
  end_question = interview.questions.initializeObject('all_done')
  end_question.type = 'question'
  end_question.question_text = 'Placeholder download screen'
  end_question.subquestion_text = 'Placeholder'
  # end_question.is_mandatory = True
  # We added this feature -- a variable to reference the attachment with
  end_question.attachment_variable_name = attachment_variable_name
  end_question.interview = interview
  end_question.interview_label = interview_label
  end_question.attachments = attachments
  end_question.field_list.appendObject()
  end_question.field_list[0].field_type = 'end_attachment'
  end_question.field_list[0].variable = 'all_done'
  end_question.field_list[0].question = end_question
  end_question.field_list.gathered = True
  
  created_attachment = True